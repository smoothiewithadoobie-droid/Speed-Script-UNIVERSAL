--!strict
-- Smoothies Script Hub â€” movable + resizable, fixed hitboxes, reliable noclip, tidy UI, fade-out unload
-- LocalScript -> StarterPlayerScripts

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local TweenService = game:GetService("TweenService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- ===== CONFIG =====
local SPEED_MIN, SPEED_MAX, SPEED_DEFAULT = 8, 500, 16
local JUMP_MIN,  JUMP_MAX,  JUMP_DEFAULT = 0, 200, 50
local DEV_PORTAL_URL = "https://create.roblox.com/dashboard/creations"
local DISCORD_INVITE  = "https://discord.gg/WwADpVwRvu"
local LOAD_SECONDS    = 10

-- ===== STATE =====
local keybinds = { Teleport = Enum.KeyCode.F, Noclip = Enum.KeyCode.X }
local listening: string? = nil
local minimized = false
local noclipEnabled = false
local keepApplyConn: RBXScriptConnection? = nil
local origCanCollide: {[Instance]: boolean} = {}
local highlights: { [Player]: Highlight } = {}
local hitboxAdded = false
local btoolsGiven = false
local unloaded = false
local bookmarks: {Vector3} = {}

-- ===== HELPERS =====
local function clamp(n:number, a:number, b:number) return (n<a and a) or (n>b and b) or n end
local function getCharacter() return player.Character or player.CharacterAdded:Wait() end
local function getHumanoid(): Humanoid
	local c = getCharacter()
	return (c:FindFirstChildOfClass("Humanoid") or c:WaitForChild("Humanoid")) :: Humanoid
end
local function getHRP(): BasePart
	local c = getCharacter()
	return (c:FindFirstChild("HumanoidRootPart") or c:WaitForChild("HumanoidRootPart")) :: BasePart
end

-- ===== ROOT GUI =====
local gui = Instance.new("ScreenGui")
gui.Name = "SmoothiesScriptHub"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = player:WaitForChild("PlayerGui")

-- ===== LOADER (mini window) =====
local loader = Instance.new("Frame")
loader.Size = UDim2.fromOffset(440, 126)
loader.Position = UDim2.new(0.5, -220, 0.25, 0)
loader.BackgroundColor3 = Color3.fromRGB(26,26,30)
loader.BorderSizePixel = 0
loader.Parent = gui
Instance.new("UICorner", loader).CornerRadius = UDim.new(0,12)

local lt = Instance.new("TextLabel")
lt.BackgroundTransparency = 1; lt.Font = Enum.Font.GothamBold; lt.TextSize = 20
lt.Text = "Smoothies Script Hub"; lt.TextColor3 = Color3.new(1,1,1)
lt.Position = UDim2.fromOffset(16, 12); lt.Size = UDim2.fromOffset(400, 24); lt.Parent = loader

local ls = Instance.new("TextLabel")
ls.BackgroundTransparency = 1; ls.Font = Enum.Font.Gotham; ls.TextSize = 14
ls.Text = "Loading script..."; ls.TextColor3 = Color3.fromRGB(210,210,220)
ls.Position = UDim2.fromOffset(16, 44); ls.Size = UDim2.fromOffset(400, 18); ls.Parent = loader

local track = Instance.new("Frame")
track.BackgroundColor3 = Color3.fromRGB(45,45,52); track.BorderSizePixel = 0
track.Position = UDim2.fromOffset(16, 72); track.Size = UDim2.fromOffset(408, 12); track.Parent = loader
Instance.new("UICorner", track).CornerRadius = UDim.new(0,6)

local fill = Instance.new("Frame")
fill.AnchorPoint = Vector2.new(0,0.5); fill.Position = UDim2.fromScale(0,0.5)
fill.Size = UDim2.fromScale(0,1); fill.BackgroundColor3 = Color3.fromRGB(86,180,140)
fill.BorderSizePixel = 0; fill.Parent = track
Instance.new("UICorner", fill).CornerRadius = UDim.new(0,6)

local pct = Instance.new("TextLabel")
pct.BackgroundTransparency = 1; pct.Font = Enum.Font.Gotham; pct.TextSize = 14
pct.TextColor3 = Color3.fromRGB(210,210,220); pct.Text = "0%"
pct.Position = UDim2.fromOffset(16, 94); pct.Size = UDim2.fromOffset(120, 18); pct.Parent = loader

-- animate progress
local startTime = time()
TweenService:Create(fill, TweenInfo.new(LOAD_SECONDS, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = UDim2.fromScale(1,1)}):Play()
local progConn = RunService.RenderStepped:Connect(function()
	local p = math.clamp((time()-startTime)/LOAD_SECONDS,0,1); pct.Text = string.format("%d%%", math.floor(p*100+0.5))
	if p>=1 then progConn:Disconnect() end
end)

-- ===== COLORS =====
local pal = {
	panel = Color3.fromRGB(22,22,26), header = Color3.fromRGB(28,28,32), side = Color3.fromRGB(26,26,30),
	accent = Color3.fromRGB(104, 96, 176), green = Color3.fromRGB(110,170,80),
	red = Color3.fromRGB(160,70,70), orange = Color3.fromRGB(255,170,90), cyan = Color3.fromRGB(86,180,140),
	buttonDark = Color3.fromRGB(45,45,55), slate = Color3.fromRGB(80,110,140), grayBtn = Color3.fromRGB(80,85,95)
}

-- ===== MAIN WINDOW (created after load) =====
local panel: Frame
local header: Frame
local body: Frame
local sidebar: Frame
local pages: Frame
local pageMain: Frame
local pageCredits: Frame
local windowSize = Vector2.new(900, 560) -- BIGGER default
local minSize   = Vector2.new(720, 440)
local maxSize   = Vector2.new(1400, 900)

-- tiny builder helpers
local function label(parent: Instance, txt: string, size: number, bold: boolean, x: number, y: number, color: Color3?)
	local l = Instance.new("TextLabel")
	l.BackgroundTransparency = 1
	l.Font = bold and Enum.Font.GothamBold or Enum.Font.Gotham
	l.TextSize = size; l.Text = txt; l.TextColor3 = color or Color3.fromRGB(235,235,235)
	l.TextXAlignment = Enum.TextXAlignment.Left
	l.Position = UDim2.fromOffset(x, y); l.Size = UDim2.fromOffset(600, size+8); l.Parent = parent
	return l
end
local function makePill(parent: Instance, text: string, pos: UDim2, size: UDim2, color: Color3)
	local b = Instance.new("TextButton")
	b.Text = text; b.Font = Enum.Font.GothamBold; b.TextSize = 14; b.TextColor3 = Color3.new(1,1,1)
	b.Position = pos; b.Size = size; b.BackgroundColor3 = color; b.BorderSizePixel = 0; b.Parent = parent
	Instance.new("UICorner", b).CornerRadius = UDim.new(1,0)
	return b
end
local function makeTrack(parent: Instance, x: number, y: number, w: number, fillColor: Color3)
	local trackF = Instance.new("Frame")
	trackF.BackgroundColor3 = Color3.fromRGB(55,55,60); trackF.BorderSizePixel = 0
	trackF.Position = UDim2.fromOffset(x, y); trackF.Size = UDim2.fromOffset(w, 10); trackF.Parent = parent
	Instance.new("UICorner", trackF).CornerRadius = UDim.new(0,5)
	local fillF = Instance.new("Frame")
	fillF.AnchorPoint=Vector2.new(0,0.5); fillF.Position=UDim2.fromScale(0,0.5); fillF.Size=UDim2.fromScale(0,1)
	fillF.BackgroundColor3 = fillColor; fillF.BorderSizePixel = 0; fillF.Parent = trackF
	Instance.new("UICorner", fillF).CornerRadius = UDim.new(0,5)
	local knob = Instance.new("ImageButton")
	knob.AnchorPoint=Vector2.new(0.5,0.5); knob.Size=UDim2.fromOffset(16,16); knob.Position=UDim2.fromScale(0,0.5)
	knob.BackgroundColor3 = Color3.fromRGB(242,242,242); knob.BorderSizePixel=0; knob.Parent=trackF
	Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
	return trackF, fillF, knob
end
local function connectSlider(trackF:Frame, fillF:Frame, knob:ImageButton, minV:number, maxV:number, defaultV:number, onSet:(number)->())
	local function toAlpha(v:number) return (v - minV)/(maxV-minV) end
	local function fromAlpha(a:number) return math.floor(minV + a*(maxV-minV) + 0.5) end
	local function setAlpha(a:number)
		a = clamp(a,0,1); fillF.Size = UDim2.fromScale(a,1); knob.Position = UDim2.fromScale(a,0.5); onSet(fromAlpha(a))
	end
	setAlpha(toAlpha(defaultV))
	trackF.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then
		setAlpha((inp.Position.X - trackF.AbsolutePosition.X)/trackF.AbsoluteSize.X) end end)
	local dragging=false
	knob.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=true end end)
	knob.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=false end end)
	UIS.InputChanged:Connect(function(inp)
		if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement then
			setAlpha((inp.Position.X - trackF.AbsolutePosition.X)/trackF.AbsoluteSize.X)
		end
	end)
	return function(v:number) setAlpha(toAlpha(v)) end
end

-- build main UI after loader
local function buildMain()
	panel = Instance.new("Frame")
	panel.Name = "MainPanel"
	panel.Size = UDim2.fromOffset(windowSize.X, windowSize.Y)
	panel.Position = UDim2.new(0.5, -windowSize.X/2, 0.12, 0)
	panel.BackgroundColor3 = pal.panel
	panel.BorderSizePixel = 0
	panel.Parent = gui
	Instance.new("UICorner", panel).CornerRadius = UDim.new(0,12)

	header = Instance.new("Frame")
	header.Size = UDim2.fromOffset(windowSize.X, 56)
	header.BackgroundColor3 = pal.header
	header.BorderSizePixel = 0
	header.Parent = panel
	Instance.new("UICorner", header).CornerRadius = UDim.new(0,12)

	local title = label(header, "Smoothies Script Hub", 20, true, 14, 16)

	local function topBtn(txt, offsetX, bg)
		local b = Instance.new("TextButton")
		b.Text = txt; b.Font=Enum.Font.GothamBold; b.TextSize=16; b.TextColor3=Color3.fromRGB(255,255,255)
		b.Size=UDim2.fromOffset(30,26); b.Position=UDim2.new(1, offsetX, 0, 15)
		b.BackgroundColor3 = bg; b.BorderSizePixel = 0; b.Parent = header
		Instance.new("UICorner", b).CornerRadius = UDim.new(0,6)
		return b
	end
	local minBtn  = topBtn("-", -72, Color3.fromRGB(90,90,100))
	local closeBtn= topBtn("X", -36, pal.red)

	body = Instance.new("Frame")
	body.Position = UDim2.fromOffset(0, 56)
	body.Size = UDim2.fromOffset(windowSize.X, windowSize.Y - 56)
	body.BackgroundTransparency = 1
	body.Parent = panel

	-- sidebar
	sidebar = Instance.new("Frame")
	sidebar.Size = UDim2.fromOffset(180, body.Size.Y.Offset)
	sidebar.Position = UDim2.fromOffset(0, 0)
	sidebar.BackgroundColor3 = pal.side
	sidebar.BorderSizePixel = 0
	sidebar.Parent = body
	Instance.new("UICorner", sidebar).CornerRadius = UDim.new(0,8)

	local sideList = Instance.new("UIListLayout", sidebar)
	sideList.SortOrder = Enum.SortOrder.LayoutOrder
	sideList.Padding = UDim.new(0, 8)

	local function sideBtn(txt)
		local b = Instance.new("TextButton")
		b.Text = txt; b.Font = Enum.Font.GothamBold; b.TextSize = 16; b.TextColor3 = Color3.new(1,1,1)
		b.Size = UDim2.fromOffset(180, 44)
		b.BackgroundColor3 = Color3.fromRGB(42,42,50)
		b.BorderSizePixel = 0; b.Parent = sidebar
		Instance.new("UICorner", b).CornerRadius = UDim.new(0,8)
		return b
	end
	local btnMain = sideBtn("Main")
	local btnCredits = sideBtn("Credits")

	pages = Instance.new("Frame")
	pages.Size = UDim2.fromOffset(body.Size.X.Offset - 180, body.Size.Y.Offset)
	pages.Position = UDim2.fromOffset(180, 0)
	pages.BackgroundTransparency = 1
	pages.Parent = body

	local function makePage() local f=Instance.new("Frame"); f.BackgroundTransparency=1; f.Size=UDim2.fromScale(1,1); f.Visible=false; f.Parent=pages; return f end
	pageMain = makePage(); pageCredits = makePage()
	local function showPage(which: Frame)
		for _,c in ipairs(pages:GetChildren()) do if c:IsA("Frame") then c.Visible = (c==which) end end
	end
	showPage(pageMain)
	btnMain.MouseButton1Click:Connect(function() showPage(pageMain) end)
	btnCredits.MouseButton1Click:Connect(function() showPage(pageCredits) end)

	-- resize grip (bottom-right)
	local grip = Instance.new("Frame")
	grip.Size = UDim2.fromOffset(16,16)
	grip.AnchorPoint = Vector2.new(1,1)
	grip.Position = UDim2.new(1, -6, 1, -6)
	grip.BackgroundColor3 = Color3.fromRGB(120,120,130)
	grip.BorderSizePixel = 0
	grip.Parent = panel
	Instance.new("UICorner", grip).CornerRadius = UDim.new(0,4)

	local resizing=false; local startMouse; local startSize
	grip.InputBegan:Connect(function(inp)
		if inp.UserInputType==Enum.UserInputType.MouseButton1 then
			resizing=true; startMouse = UIS:GetMouseLocation(); startSize = Vector2.new(panel.Size.X.Offset, panel.Size.Y.Offset)
			inp.Changed:Connect(function() if inp.UserInputState==Enum.UserInputState.End then resizing=false end end)
		end
	end)
	UIS.InputChanged:Connect(function(inp)
		if resizing and inp.UserInputType==Enum.UserInputType.MouseMovement then
			local delta = UIS:GetMouseLocation() - startMouse
			local newW = clamp(startSize.X + delta.X, minSize.X, maxSize.X)
			local newH = clamp(startSize.Y + delta.Y, minSize.Y, maxSize.Y)
			panel.Size = UDim2.fromOffset(newW, newH)
			body.Size  = UDim2.fromOffset(newW, newH - 56)
			sidebar.Size = UDim2.fromOffset(180, newH - 56)
			pages.Size = UDim2.fromOffset(newW - 180, newH - 56)
			grip.Position = UDim2.new(1, -6, 1, -6)
		end
	end)

	-- window drag
	do
		local dragging=false; local dragStart; local startPos
		header.InputBegan:Connect(function(inp)
			if inp.UserInputType==Enum.UserInputType.MouseButton1 then
				dragging=true; dragStart=inp.Position; startPos=panel.Position
				inp.Changed:Connect(function() if inp.UserInputState==Enum.UserInputState.End then dragging=false end end)
			end
		end)
		UIS.InputChanged:Connect(function(inp)
			if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement and dragStart and startPos then
				local d=inp.Position-dragStart
				panel.Position=UDim2.fromOffset(startPos.X.Offset+d.X, startPos.Y.Offset+d.Y)
			end
		end)
	end

	-- minimize / close
	minBtn.MouseButton1Click:Connect(function()
		minimized = not minimized
		sidebar.Visible = not minimized
		pages.Visible   = not minimized
		if minimized then
			TweenService:Create(panel, TweenInfo.new(0.15), {Size = UDim2.fromOffset(panel.Size.X.Offset, 64)}):Play()
		else
			TweenService:Create(panel, TweenInfo.new(0.15), {Size = UDim2.fromOffset(windowSize.X, windowSize.Y)}):Play()
		end
	end)

	-- unload confirm with fade-away animation
	local overlay = Instance.new("Frame")
	overlay.Visible=false; overlay.BackgroundColor3=Color3.new(0,0,0); overlay.BackgroundTransparency=0.35
	overlay.Size=UDim2.fromScale(1,1); overlay.Parent=panel
	local box = Instance.new("Frame"); box.Size=UDim2.fromOffset(360,120); box.Position=UDim2.new(0.5,-180,0.5,-60)
	box.BackgroundColor3 = Color3.fromRGB(30,30,30); box.BorderSizePixel=0; box.Parent=overlay
	Instance.new("UICorner", box).CornerRadius = UDim.new(0,10)
	label(box, "Are you sure you want to unload?", 18, true, 12, 14)
	local yesBtn = makePill(box, "Yes, unload", UDim2.fromOffset(12,72), UDim2.fromOffset(160,34), pal.red)
	local noBtn  = makePill(box, "No, keep open", UDim2.fromOffset(188,72), UDim2.fromOffset(160,34), pal.grayBtn)

	local function fullUnload()
		if unloaded then return end
		unloaded = true
		-- restore defaults
		if noclipEnabled then
			noclipEnabled=false
			if keepApplyConn then keepApplyConn:Disconnect() keepApplyConn=nil end
			for _, d in ipairs(getCharacter():GetDescendants()) do
				if d:IsA("BasePart") and origCanCollide[d] ~= nil then d.CanCollide = origCanCollide[d] end
			end
			origCanCollide = {}
		end
		local hum = getHumanoid(); hum.WalkSpeed=SPEED_DEFAULT; hum.UseJumpPower=true; hum.JumpPower=JUMP_DEFAULT
		for _,h in pairs(highlights) do if h then h:Destroy() end end
		highlights = {}
		-- remove hitboxes
		for _,plr in ipairs(Players:GetPlayers()) do
			local c=plr.Character; if c then local hb=c:FindFirstChild("Hitbox"); if hb and hb:IsA("BasePart") then hb:Destroy() end end
		end
		-- remove BTools
		local bp = player:FindFirstChildOfClass("Backpack")
		if bp then for _,t in ipairs(bp:GetChildren()) do if t:IsA("Tool") and t.Name:sub(1,3)=="BT_" then t:Destroy() end end end
		-- fade-out UI then destroy
		local tween = TweenService:Create(panel, TweenInfo.new(0.25, Enum.EasingStyle.Quad), {BackgroundTransparency = 1})
		for _,desc in ipairs(panel:GetDescendants()) do
			if desc:IsA("Frame") or desc:IsA("TextLabel") or desc:IsA("TextButton") or desc:IsA("ImageLabel") then
				pcall(function() desc.BackgroundTransparency = desc.BackgroundTransparency end)
				pcall(function()
					TweenService:Create(desc, TweenInfo.new(0.25, Enum.EasingStyle.Quad),
						{BackgroundTransparency = 1, TextTransparency = desc:IsA("TextLabel") or desc:IsA("TextButton") and 1 or nil}):Play()
				end)
			end
		end
		tween:Play(); tween.Completed:Wait()
		gui:Destroy()
	end
	closeBtn.MouseButton1Click:Connect(function() overlay.Visible = true end)
	noBtn.MouseButton1Click:Connect(function() overlay.Visible = false end)
	yesBtn.MouseButton1Click:Connect(function() fullUnload() end)

	-- ========= MAIN PAGE CONTENT =========
	local workW = pages.Size.X.Offset
	label(pageMain, "Main", 22, true, 14, 12)

	-- Walk speed
	label(pageMain, "Walk Speed", 14, false, 14, 56)
	local walkVal = label(pageMain, tostring(SPEED_DEFAULT), 14, false, workW - 40, 56); walkVal.TextXAlignment = Enum.TextXAlignment.Right
	local walkTrack, walkFill, walkKnob = makeTrack(pageMain, 14, 76, workW - 40, pal.cyan)

	local speedBox = Instance.new("TextBox")
	speedBox.PlaceholderText = "Type speed (8â€“500)"
	speedBox.Font = Enum.Font.Gotham; speedBox.TextSize = 14
	speedBox.TextColor3 = Color3.fromRGB(255,255,255)
	speedBox.BackgroundColor3 = Color3.fromRGB(36,36,42)
	speedBox.BorderSizePixel = 0; speedBox.Size = UDim2.fromOffset(workW - 40, 28)
	speedBox.Position = UDim2.fromOffset(14, 100); speedBox.Parent = pageMain
	Instance.new("UICorner", speedBox).CornerRadius = UDim.new(0,8)

	-- Jump power
	label(pageMain, "Jump Power", 14, false, 14, 144)
	local jumpVal = label(pageMain, tostring(JUMP_DEFAULT), 14, false, workW - 40, 144); jumpVal.TextXAlignment=Enum.TextXAlignment.Right
	local jumpTrack, jumpFill, jumpKnob = makeTrack(pageMain, 14, 164, workW - 40, pal.orange)

	-- Functions to apply values
	local function applyWalk(v:number) walkVal.Text=tostring(v); getHumanoid().WalkSpeed=v end
	local function applyJump(v:number) jumpVal.Text=tostring(v); local h=getHumanoid(); h.UseJumpPower=true; h.JumpPower=v end

	local setWalk = connectSlider(walkTrack, walkFill, walkKnob, SPEED_MIN, SPEED_MAX, SPEED_DEFAULT, applyWalk)
	local setJump = connectSlider(jumpTrack, jumpFill, jumpKnob, JUMP_MIN, JUMP_MAX, JUMP_DEFAULT, applyJump)

	speedBox.FocusLost:Connect(function()
		if unloaded then return end
		local n = tonumber(speedBox.Text)
		if n then n = clamp(math.floor(n + 0.5), SPEED_MIN, SPEED_MAX); setWalk(n); applyWalk(n) end
		speedBox.Text = ""
	end)

	-- Buttons rows
	local btnW = math.floor((workW - 40 - 20)/3) -- 3 columns
	local teleportBtn = makePill(pageMain, "Teleport (keybind)", UDim2.fromOffset(16, 210), UDim2.fromOffset(btnW, 36), pal.accent)
	local noclipBtn   = makePill(pageMain, "Noclip: OFF",        UDim2.fromOffset(20+btnW, 210), UDim2.fromOffset(btnW, 36), pal.red)
	local btoolsBtn   = makePill(pageMain, "Give BTools",        UDim2.fromOffset(24+btnW*2, 210), UDim2.fromOffset(btnW, 36), pal.green)

	local resetSpeed  = makePill(pageMain, "Reset Speed",        UDim2.fromOffset(16, 254), UDim2.fromOffset(btnW, 36), pal.red)
	local resetJump   = makePill(pageMain, "Reset Jump",         UDim2.fromOffset(20+btnW, 254), UDim2.fromOffset(btnW, 36), pal.red)
	local portalBtn   = makePill(pageMain, "Dev Portal",         UDim2.fromOffset(24+btnW*2, 254), UDim2.fromOffset(btnW, 36), pal.accent)

	-- Player Boxes + Hitboxes
	local espBtn      = makePill(pageMain, "Player Boxes: OFF",  UDim2.fromOffset(24+btnW*2, 294), UDim2.fromOffset(btnW, 36), pal.grayBtn)
	local addHBBtn    = makePill(pageMain, "Add Hitboxes",       UDim2.fromOffset(24+btnW*2, 334), UDim2.fromOffset(btnW, 36), Color3.fromRGB(180,80,80))
	local rmHBBtn     = makePill(pageMain, "Remove Hitboxes",    UDim2.fromOffset(24+btnW*2, 374), UDim2.fromOffset(btnW, 36), Color3.fromRGB(95,95,105))

	-- Bookmarks
	label(pageMain, "Teleport Bookmarks", 16, true, 14, 304)
	local addBookmarkBtn = makePill(pageMain, "Add Bookmark (current)", UDim2.fromOffset(16, 330), UDim2.fromOffset(btnW*2+4, 36), pal.cyan)
	local bookmarksFrame = Instance.new("Frame")
	bookmarksFrame.BackgroundTransparency = 1; bookmarksFrame.Position = UDim2.fromOffset(16, 374)
	bookmarksFrame.Size = UDim2.fromOffset(btnW*2+4, 90); bookmarksFrame.Parent = pageMain
	local bookmarksLayout = Instance.new("UIListLayout", bookmarksFrame)
	bookmarksLayout.SortOrder = Enum.SortOrder.LayoutOrder; bookmarksLayout.Padding = UDim.new(0,8)

	-- Keybind row
	label(pageMain, "Keybinds", 16, true, 14, windowSize.Y-56-70)
	local tpBindBtn = makePill(pageMain, "Teleport: "..keybinds.Teleport.Name, UDim2.fromOffset(16, windowSize.Y-56-40), UDim2.fromOffset(btnW, 34), pal.buttonDark)
	local ncBindBtn = makePill(pageMain, "Noclip: "..keybinds.Noclip.Name,     UDim2.fromOffset(20+btnW, windowSize.Y-56-40), UDim2.fromOffset(btnW, 34), pal.buttonDark)
	local fpsLabel  = label(pageMain, "FPS: --", 14, false, 16, windowSize.Y-56-6)

	-- ========== WIRING ==========
	-- Noclip (toggle + keep forcing CanCollide=false)
	local function applyNoclipOnce()
		local char = getCharacter()
		for _, d in ipairs(char:GetDescendants()) do
			if d:IsA("BasePart") then
				if origCanCollide[d] == nil then origCanCollide[d] = d.CanCollide end
				d.CanCollide = false
			end
		end
	end
	local function stopNoclip()
		if not noclipEnabled then return end
		noclipEnabled = false
		noclipBtn.Text = "Noclip: OFF"
		if keepApplyConn then keepApplyConn:Disconnect() keepApplyConn=nil end
		local char = getCharacter()
		for _, d in ipairs(char:GetDescendants()) do
			if d:IsA("BasePart") and origCanCollide[d] ~= nil then d.CanCollide = origCanCollide[d] end
		end
		origCanCollide = {}
	end
	local function startNoclip()
		if noclipEnabled then return end
		noclipEnabled = true
		noclipBtn.Text = "Noclip: ON"
		applyNoclipOnce()
		keepApplyConn = RunService.Heartbeat:Connect(function()
			if noclipEnabled then applyNoclipOnce() end
		end)
	end
	local function toggleNoclip() if noclipEnabled then stopNoclip() else startNoclip() end end
	noclipBtn.MouseButton1Click:Connect(function() if not unloaded then toggleNoclip() end end)

	-- Keybind rebind + actions (ensures noclip on X works even when not focused)
	local function beginListen(which: string, btn: TextButton)
		if listening then return end
		listening = which
		btn.Text = which..": Press..."
		btn.BackgroundColor3 = Color3.fromRGB(70,70,30)
	end
	tpBindBtn.MouseButton1Click:Connect(function() beginListen("Teleport", tpBindBtn) end)
	ncBindBtn.MouseButton1Click:Connect(function() beginListen("Noclip",   ncBindBtn) end)

	UIS.InputBegan:Connect(function(inp, gp)
		if unloaded then return end
		-- capture new bind
		if listening and inp.UserInputType==Enum.UserInputType.Keyboard then
			local kc = inp.KeyCode
			if kc ~= Enum.KeyCode.Unknown and kc ~= Enum.KeyCode.Escape then
				if listening == "Teleport" then keybinds.Teleport = kc; tpBindBtn.Text = "Teleport: "..kc.Name end
				if listening == "Noclip"   then keybinds.Noclip   = kc; ncBindBtn.Text = "Noclip: "..kc.Name end
				listening = nil
				tpBindBtn.BackgroundColor3 = pal.buttonDark
				ncBindBtn.BackgroundColor3 = pal.buttonDark
			end
			return
		end
		-- actions (gp may be true in textboxes; we still want noclip/teleport to be responsive when not typing)
		if inp.UserInputType==Enum.UserInputType.Keyboard then
			if inp.KeyCode == keybinds.Teleport and not gp then
				-- teleport to mouse position
				local hrp = getHRP(); local hit = mouse.Hit
				if hit then hrp.CFrame = CFrame.new(hit.Position + Vector3.new(0,3,0)) end
			elseif inp.KeyCode == keybinds.Noclip and not gp then
				toggleNoclip()
			end
		end
	end)

	-- Walk/Jump controls & resets
	local function setDefaults()
		getHumanoid().WalkSpeed = SPEED_DEFAULT
		local h=getHumanoid(); h.UseJumpPower=true; h.JumpPower=JUMP_DEFAULT
		walkVal.Text=tostring(SPEED_DEFAULT); jumpVal.Text=tostring(JUMP_DEFAULT)
	end
	resetSpeed.MouseButton1Click:Connect(function() setWalk(SPEED_DEFAULT); applyWalk(SPEED_DEFAULT) end)
	resetJump.MouseButton1Click:Connect(function()  setJump(JUMP_DEFAULT);   applyJump(JUMP_DEFAULT)  end)

	-- BTools (simple)
	local function mkTool(name:string) local t=Instance.new("Tool"); t.RequiresHandle=false; t.Name=name; t.CanBeDropped=false; return t end
	btoolsBtn.MouseButton1Click:Connect(function()
		if unloaded or btoolsGiven then return end; btoolsGiven=true
		local bp = player:WaitForChild("Backpack")
		local del = mkTool("BT_Delete")
		del.Activated:Connect(function() local t=mouse.Target if t and not t:IsDescendantOf(player.Character) then t:Destroy() end end); del.Parent=bp
		local cln = mkTool("BT_Clone")
		cln.Activated:Connect(function() local t=mouse.Target if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then local c=t:Clone(); c.CFrame=t.CFrame*CFrame.new(0,3,0); c.Parent=t.Parent end end); cln.Parent=bp
		local mv = mkTool("BT_Move"); local conn; local picked:BasePart?
		mv.Activated:Connect(function()
			local t=mouse.Target
			if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then
				picked=t; pcall(function() picked:SetNetworkOwner(player) end)
				conn = RunService.RenderStepped:Connect(function() local cf=mouse.Hit if picked and cf then picked.CFrame=CFrame.new(cf.Position) end end)
			end
		end)
		mv.Deactivated:Connect(function() if conn then conn:Disconnect() conn=nil end picked=nil end)
		mv.Parent=bp
	end)

	-- Dev portal
	portalBtn.MouseButton1Click:Connect(function()
		local _ = pcall(function() GuiService:OpenBrowserWindow(DEV_PORTAL_URL) end)
	end)

	-- Player Boxes (Highlight)
	local espOn=false
	local function ensureHighlight(plr: Player)
		if plr==player or not plr.Character or highlights[plr] then return end
		local h = Instance.new("Highlight"); h.FillTransparency=1; h.OutlineTransparency=0
		h.OutlineColor = Color3.fromRGB(255,120,120); h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
		h.Parent = plr.Character; highlights[plr]=h
	end
	local function espEnable()
		for _,p in ipairs(Players:GetPlayers()) do if p~=player and p.Character then ensureHighlight(p) end end
		espBtn.Text="Player Boxes: ON"; espBtn.BackgroundColor3 = Color3.fromRGB(60,130,90); espOn=true
	end
	local function espDisable()
		for p,h in pairs(highlights) do if h then h:Destroy() end end
		highlights = {}; espBtn.Text="Player Boxes: OFF"; espBtn.BackgroundColor3 = pal.grayBtn; espOn=false
	end
	espBtn.MouseButton1Click:Connect(function() if espOn then espDisable() else espEnable() end end)

	-- HITBOXES (visible parts so you can see them; client-side only)
	local function getOrCreateHitbox(char: Model): BasePart?
		local hrp = char:FindFirstChild("HumanoidRootPart")
		if not hrp or not hrp:IsA("BasePart") then return nil end
		local hb = char:FindFirstChild("Hitbox")
		if hb and hb:IsA("BasePart") then return hb end
		hb = Instance.new("Part")
		hb.Name = "Hitbox"
		hb.Size = Vector3.new(5, 7, 5)         -- clear, slightly larger than the body
		hb.Transparency = 0.65                  -- visible so you can confirm it exists
		hb.Material = Enum.Material.ForceField  -- nice glow look
		hb.Color = Color3.fromRGB(255, 85, 85)
		hb.Anchored = false
		hb.CanCollide = false
		hb.CanQuery = true
		hb.CanTouch = true
		hb.Massless = true
		hb.Parent = char
		local weld = Instance.new("WeldConstraint")
		weld.Part0 = hrp
		weld.Part1 = hb
		weld.Parent = hb
		hb.CFrame = hrp.CFrame
		return hb
	end

	local charAddedConns: { [Player]: RBXScriptConnection } = {}

	local function addHitboxesAll()
		for _,plr in ipairs(Players:GetPlayers()) do
			if plr.Character then getOrCreateHitbox(plr.Character) end
			if charAddedConns[plr] then charAddedConns[plr]:Disconnect() end
			charAddedConns[plr] = plr.CharacterAdded:Connect(function(c) if hitboxAdded then task.defer(function() getOrCreateHitbox(c) end) end end)
		end
	end
	local function removeHitboxesAll()
		for _,plr in ipairs(Players:GetPlayers()) do
			if charAddedConns[plr] then charAddedConns[plr]:Disconnect(); charAddedConns[plr]=nil end
			local c = plr.Character
			if c then local hb=c:FindFirstChild("Hitbox"); if hb and hb:IsA("BasePart") then hb:Destroy() end end
		end
	end

	addHBBtn.MouseButton1Click:Connect(function()
		if unloaded then return end
		hitboxAdded = true
		addHitboxesAll()
	end)
	rmHBBtn.MouseButton1Click:Connect(function()
		if unloaded then return end
		hitboxAdded = false
		removeHitboxesAll()
	end)

	-- BOOKMARKS
	local function rebuildBookmarksUI()
		for _,c in ipairs(bookmarksFrame:GetChildren()) do if not c:IsA("UIListLayout") then c:Destroy() end end
		for i,pos in ipairs(bookmarks) do
			local b = makePill(bookmarksFrame, ("#%d â€” Teleport"):format(i), UDim2.fromOffset(0,0), UDim2.fromOffset(240,28), pal.slate)
			b.MouseButton1Click:Connect(function()
				pcall(function() getHRP().CFrame = CFrame.new(pos + Vector3.new(0,3,0)) end)
			end)
		end
	end
	addBookmarkBtn.MouseButton1Click:Connect(function()
		local hrp = getHRP(); table.insert(bookmarks, hrp.Position); rebuildBookmarksUI()
	end)

	-- FPS label
	local last = time(); local frames = 0
	RunService.RenderStepped:Connect(function()
		frames += 1; local now = time()
		if now - last >= 1 then fpsLabel.Text = "FPS: "..frames; frames = 0; last = now end
	end)

	-- Credits page
	label(pageCredits, "Credits", 22, true, 14, 12)
	label(pageCredits, "Smoothalicious was here", 16, false, 14, 54)
	local discordBtn = makePill(pageCredits, "Copy Invite / Open Discord", UDim2.fromOffset(14, 96), UDim2.fromOffset(320, 36), pal.accent)
	local function copyToClipboard(text:string)
		return pcall(function()
			if setclipboard then setclipboard(text) return end
			if GuiService.SetClipboard then GuiService:SetClipboard(text) return end
			error("no clipboard")
		end)
	end
	discordBtn.MouseButton1Click:Connect(function()
		if copyToClipboard(DISCORD_INVITE) then
			discordBtn.Text = "Invite Copied!"
			task.delay(1.6, function() if discordBtn and not unloaded then discordBtn.Text = "Copy Invite / Open Discord" end end)
		else
			local _ = pcall(function() GuiService:OpenBrowserWindow(DISCORD_INVITE) end)
		end
	end)

	-- defaults
	getHumanoid().WalkSpeed = SPEED_DEFAULT; local h=getHumanoid(); h.UseJumpPower=true; h.JumpPower=JUMP_DEFAULT

	-- respawn persistence
	player.CharacterAdded:Connect(function()
		task.defer(function()
			if noclipEnabled then origCanCollide = {}; applyNoclipOnce() end
			if hitboxAdded then addHitboxesAll() end
			-- keep current numbers
			applyWalk(tonumber(walkVal.Text) or SPEED_DEFAULT)
			applyJump(tonumber(jumpVal.Text) or JUMP_DEFAULT)
		end)
	end)
end

-- after loading completes, fade out loader and build UI
task.delay(LOAD_SECONDS, function()
	local fade = TweenService:Create(loader, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {BackgroundTransparency = 1})
	fade:Play(); fade.Completed:Wait(); loader:Destroy()
	buildMain()
end)
