--!strict
-- Utility UI (pretty) + ESP + Server Hitbox controls
-- Put this as a LocalScript in StarterPlayer -> StarterPlayerScripts

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local VoiceChatService = game:GetService("VoiceChatService")
local GuiService = game:GetService("GuiService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- ===== CONFIG =====
local SPEED_MIN, SPEED_MAX, SPEED_DEFAULT = 8, 500, 16
local JUMP_MIN,  JUMP_MAX,  JUMP_DEFAULT = 0, 200, 50
local keybinds = { Teleport = Enum.KeyCode.F, Noclip = Enum.KeyCode.X }

-- Remote (for server hitbox)
local HITBOX_EVENT_NAME = "HitboxAdmin"
local HitboxEvent = ReplicatedStorage:FindFirstChild(HITBOX_EVENT_NAME)

-- ===== STATE =====
local listeningFor: string? = nil
local noclipEnabled = false
local keepApplyConn: RBXScriptConnection? = nil
local origCanCollide: {[Instance]: boolean} = {}
local minimized = false

-- ESP state
local espOn = false
local highlights: { [Player]: Highlight } = {}

-- ===== HELPERS =====
local function clamp(n:number, a:number, b:number) return (n<a and a) or (n>b and b) or n end
local function getCharacter() return player.Character or player.CharacterAdded:Wait() end
local function getHumanoid(): Humanoid
    local c = getCharacter()
    return (c:FindFirstChildOfClass("Humanoid") or c:WaitForChild("Humanoid")) :: Humanoid
end
local function getHRP(): BasePart
    local c = getCharacter()
    return (c:FindFirstChild("HumanoidRootPart") or c:WaitForChild("HumanoidRootPart")) :: BasePart
end

-- ===== UI ROOT (polished) =====
local gui = Instance.new("ScreenGui")
gui.Name = "UtilityUI"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = player:WaitForChild("PlayerGui")

local PANEL_W, PANEL_H = 520, 410
local TITLE_H = 56

local panel = Instance.new("Frame")
panel.Name = "Panel"
panel.Size = UDim2.fromOffset(PANEL_W, PANEL_H)
panel.Position = UDim2.fromOffset(40, 100)
panel.BackgroundColor3 = Color3.fromRGB(18,18,18)
panel.BorderSizePixel = 0
panel.Parent = gui
Instance.new("UICorner", panel).CornerRadius = UDim.new(0,16)

-- Drop shadow
local shadow = Instance.new("ImageLabel")
shadow.BackgroundTransparency = 1
shadow.Image = "rbxassetid://1316045217" -- soft shadow asset
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(10,10,118,118)
shadow.Size = UDim2.new(1, 40, 1, 40)
shadow.Position = UDim2.fromOffset(-20, -10)
shadow.ImageTransparency = 0.35
shadow.ZIndex = 0
shadow.Parent = panel

local header = Instance.new("Frame")
header.Name = "Header"
header.Size = UDim2.fromOffset(PANEL_W, TITLE_H)
header.BackgroundColor3 = Color3.fromRGB(30,30,30)
header.BorderSizePixel = 0
header.Parent = panel
Instance.new("UICorner", header).CornerRadius = UDim.new(0,16)

local grad = Instance.new("UIGradient", header)
grad.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(45,45,65)),
    ColorSequenceKeypoint.new(.5, Color3.fromRGB(40,40,55)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(35,35,45)),
}
grad.Rotation = 12

local title = Instance.new("TextLabel")
title.Text = "Utility"
title.Font = Enum.Font.GothamBlack
title.TextSize = 22
title.TextColor3 = Color3.fromRGB(255,255,255)
title.BackgroundTransparency = 1
title.TextXAlignment = Enum.TextXAlignment.Left
title.Position = UDim2.fromOffset(18, 12)
title.Size = UDim2.fromOffset(200, 32)
title.Parent = header

-- Close / Minimize
local function makeTopBtn(txt, offsetX, bg)
    local b = Instance.new("TextButton")
    b.Text = txt
    b.Font = Enum.Font.GothamBold
    b.TextSize = 16
    b.TextColor3 = Color3.fromRGB(255,255,255)
    b.Size = UDim2.fromOffset(32, 28)
    b.Position = UDim2.new(1, offsetX, 0, 14)
    b.BackgroundColor3 = bg
    b.BorderSizePixel = 0
    b.AutoButtonColor = true
    b.Parent = header
    Instance.new("UICorner", b).CornerRadius = UDim.new(0,8)
    return b
end
local minBtn  = makeTopBtn("-", -74, Color3.fromRGB(95,95,105))
local closeBtn= makeTopBtn("X", -36, Color3.fromRGB(185,60,60))

local content = Instance.new("Frame")
content.Name = "Content"
content.Position = UDim2.fromOffset(0, TITLE_H)
content.Size = UDim2.fromOffset(PANEL_W, PANEL_H - TITLE_H)
content.BackgroundTransparency = 1
content.Parent = panel

-- Make draggable via header
do
    local dragging=false; local dragStart; local startPos
    header.InputBegan:Connect(function(inp)
        if inp.UserInputType==Enum.UserInputType.MouseButton1 then
            dragging=true; dragStart=inp.Position; startPos=panel.Position
            inp.Changed:Connect(function() if inp.UserInputState==Enum.UserInputState.End then dragging=false end end)
        end
    end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement and dragStart and startPos then
            local d=inp.Position-dragStart
            panel.Position=UDim2.fromOffset(startPos.X.Offset+d.X, startPos.Y.Offset+d.Y)
        end
    end)
end

closeBtn.MouseButton1Click:Connect(function() gui:Destroy() end)
minBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        content.Visible = false
        panel.Size = UDim2.fromOffset(PANEL_W, TITLE_H + 10)
    else
        panel.Size = UDim2.fromOffset(PANEL_W, PANEL_H)
        content.Visible = true
    end
end)

-- Small helper for making section rows
local function pillButton(txt, pos, w, color)
    local b = Instance.new("TextButton")
    b.Text = txt
    b.Font = Enum.Font.GothamBold
    b.TextSize = 14
    b.TextColor3 = Color3.fromRGB(255,255,255)
    b.Size = UDim2.fromOffset(w, 32)
    b.Position = pos
    b.BackgroundColor3 = color
    b.BorderSizePixel = 0
    b.Parent = content
    Instance.new("UICorner", b).CornerRadius = UDim.new(1,0)
    return b
end

-- ===== Noclip (pill in content top-right) =====
local noclipBtn = pillButton("Noclip: OFF", UDim2.new(1,-140,0,10), 120, Color3.fromRGB(85,35,35))

-- ===== Walk speed =====
local function label(text, pos, right)
    local l = Instance.new("TextLabel")
    l.BackgroundTransparency = 1
    l.Font = Enum.Font.Gotham
    l.TextSize = 14
    l.TextColor3 = Color3.fromRGB(210,210,210)
    l.TextXAlignment = right and Enum.TextXAlignment.Right or Enum.TextXAlignment.Left
    l.Text = text
    l.Position = pos
    l.Size = UDim2.fromOffset(160, 18)
    l.Parent = content
    return l
end

local walkLabel = label("Walk Speed", UDim2.fromOffset(20, 56), false)
local walkVal   = label(tostring(SPEED_DEFAULT), UDim2.new(1,-24,0,56), true)

local function barAt(y)
    local bar = Instance.new("Frame")
    bar.Size = UDim2.fromOffset(PANEL_W - 40, 10)
    bar.Position = UDim2.fromOffset(20, y)
    bar.BackgroundColor3 = Color3.fromRGB(50,50,55)
    bar.BorderSizePixel = 0
    bar.Parent = content
    Instance.new("UICorner", bar).CornerRadius = UDim.new(0,5)
    local fill = Instance.new("Frame")
    fill.AnchorPoint = Vector2.new(0,0.5)
    fill.Position = UDim2.fromScale(0,0.5)
    fill.Size = UDim2.fromScale(0,1)
    fill.BackgroundColor3 = Color3.fromRGB(50,200,120)
    fill.BorderSizePixel = 0
    fill.Parent = bar
    Instance.new("UICorner", fill).CornerRadius = UDim.new(0,5)
    local knob = Instance.new("ImageButton")
    knob.AnchorPoint = Vector2.new(0.5,0.5)
    knob.Size = UDim2.fromOffset(16,16)
    knob.Position = UDim2.fromScale(0,0.5)
    knob.BackgroundColor3 = Color3.fromRGB(235,235,235)
    knob.BorderSizePixel = 0
    knob.Parent = bar
    Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
    local s = Instance.new("UIStroke", knob) s.Thickness = 1 s.Transparency = 0.2
    return bar, fill, knob
end

local walkBar, walkFill, walkKnob = barAt(78)

local speedInput = Instance.new("TextBox")
speedInput.PlaceholderText = "Type speed (8â€“500)"
speedInput.Text = ""
speedInput.ClearTextOnFocus = false
speedInput.Font = Enum.Font.Gotham
speedInput.TextSize = 14
speedInput.TextColor3 = Color3.fromRGB(255,255,255)
speedInput.BackgroundColor3 = Color3.fromRGB(36,36,42)
speedInput.BorderSizePixel = 0
speedInput.Size = UDim2.fromOffset(PANEL_W - 40, 28)
speedInput.Position = UDim2.fromOffset(20, 98)
speedInput.Parent = content
Instance.new("UICorner", speedInput).CornerRadius = UDim.new(0,8)

-- ===== Jump power =====
local jumpLabel = label("Jump Power", UDim2.fromOffset(20, 136), false)
local jumpVal   = label(tostring(JUMP_DEFAULT), UDim2.new(1,-24,0,136), true)
local jumpBar, jumpFill, jumpKnob = barAt(158)
jumpFill.BackgroundColor3 = Color3.fromRGB(255,170,90)

-- ===== Buttons row 1 =====
local vcBtn   = pillButton("VC Reconnect", UDim2.fromOffset(20, 196), 156, Color3.fromRGB(40,130,255))
local btoolsBtn = pillButton("Give BTools", UDim2.fromOffset(186, 196), 156, Color3.fromRGB(120,170,60))
local portalBtn = pillButton("Dev Portal",  UDim2.fromOffset(352, 196), 156, Color3.fromRGB(90,90,160))

-- ===== Buttons row 2 (resets) =====
local resetSpeed = pillButton("Reset Speed", UDim2.fromOffset(20, 236), 156, Color3.fromRGB(135,70,70))
local resetJump  = pillButton("Reset Jump",  UDim2.fromOffset(186,236), 156, Color3.fromRGB(135,70,70))

-- ===== ESP + Hitbox row =====
local espBtn     = pillButton("Player Boxes: OFF", UDim2.fromOffset(352, 236), 156, Color3.fromRGB(85,85,95))

-- Expand Hitbox (server) controls
local hbLabel = label("Expand Hitbox (server)", UDim2.fromOffset(20, 276), false)
local hbVal   = label("0", UDim2.new(1,-24,0,276), true)
local hbBar, hbFill, hbKnob = barAt(298)
hbFill.BackgroundColor3 = Color3.fromRGB(255,105,105)
local hbApply = pillButton("Apply", UDim2.fromOffset(20, 320), 156, Color3.fromRGB(180,80,80))
local hbReset = pillButton("Reset", UDim2.fromOffset(186,320), 156, Color3.fromRGB(95,95,105))

-- ===== Slider plumbing =====
local function alphaFromClick(frame:Frame, xPixel:number)
    return clamp((xPixel - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
end
local function connectSlider(bar:Frame, fill:Frame, knob:ImageButton, minV:number, maxV:number, defaultV:number, onSet:(number)->())
    local function toAlpha(v:number) return (v - minV) / (maxV - minV) end
    local function fromAlpha(a:number) return math.floor(minV + a*(maxV-minV) + 0.5) end
    local function setAlpha(a:number)
        a = clamp(a, 0, 1)
        fill.Size = UDim2.fromScale(a, 1)
        knob.Position = UDim2.fromScale(a, 0.5)
        onSet(fromAlpha(a))
    end
    setAlpha(toAlpha(defaultV))
    bar.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then setAlpha(alphaFromClick(bar, inp.Position.X)) end end)
    local dragging=false
    knob.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=true end end)
    knob.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=false end end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement then
            setAlpha(alphaFromClick(bar, inp.Position.X))
        end
    end)
    return function(v:number) setAlpha(toAlpha(v)) end
end

-- Apply functions
local function applyWalk(v:number) walkVal.Text = tostring(v); getHumanoid().WalkSpeed = v end
local function applyJump(v:number)
    jumpVal.Text = tostring(v)
    local h = getHumanoid()
    h.UseJumpPower = true
    h.JumpPower = v
end

local syncWalk = connectSlider(walkBar, walkFill, walkKnob, SPEED_MIN, SPEED_MAX, SPEED_DEFAULT, applyWalk)
local syncJump = connectSlider(jumpBar, jumpFill, jumpKnob, JUMP_MIN,  JUMP_MAX,  JUMP_DEFAULT, applyJump)

-- Speed input
speedInput.FocusLost:Connect(function()
    local n = tonumber(speedInput.Text)
    if n then
        n = clamp(math.floor(n + 0.5), SPEED_MIN, SPEED_MAX)
        syncWalk(n); applyWalk(n)
    end
    speedInput.Text = ""
end)

-- ===== Teleport / Noclip =====
local function teleportToMouse()
    local hrp = getHRP()
    local hit = mouse.Hit
    if hit then
        local p3 = Vector3.new(hit.X, hit.Y + 3, hit.Z)
        hrp.CFrame = CFrame.new(p3, p3 + hrp.CFrame.LookVector)
    end
end

local function applyNoclipOnce()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") then
            if origCanCollide[d] == nil then origCanCollide[d] = d.CanCollide end
            d.CanCollide = false
        end
    end
end
local function restoreCollision()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") and origCanCollide[d] ~= nil then d.CanCollide = origCanCollide[d] end
    end
    origCanCollide = {}
end
local function startNoclip()
    if noclipEnabled then return end
    noclipEnabled = true
    noclipBtn.Text = "Noclip: ON"
    noclipBtn.BackgroundColor3 = Color3.fromRGB(40,110,70)
    applyNoclipOnce()
    keepApplyConn = RunService.Heartbeat:Connect(function() if noclipEnabled then applyNoclipOnce() end end)
end
local function stopNoclip()
    if not noclipEnabled then return end
    noclipEnabled = false
    noclipBtn.Text = "Noclip: OFF"
    noclipBtn.BackgroundColor3 = Color3.fromRGB(85,35,35)
    if keepApplyConn then keepApplyConn:Disconnect() keepApplyConn=nil end
    restoreCollision()
end
local function toggleNoclip() if noclipEnabled then stopNoclip() else startNoclip() end end

noclipBtn.MouseButton1Click:Connect(toggleNoclip)

-- Keybinds (Teleport/Noclip)
local kbTitle = Instance.new("TextLabel")
kbTitle.BackgroundTransparency = 1
kbTitle.Font = Enum.Font.GothamBold
kbTitle.TextSize = 14
kbTitle.TextColor3 = Color3.fromRGB(255,255,255)
kbTitle.TextXAlignment = Enum.TextXAlignment.Left
kbTitle.Text = "Keybinds"
kbTitle.Position = UDim2.fromOffset(352, 276)
kbTitle.Size = UDim2.fromOffset(156, 18)
kbTitle.Parent = content

local function bindButton(labelText, y)
    local lbl = label(labelText, UDim2.fromOffset(352, y), false)
    local btn = pillButton(keybinds[labelText].Name, UDim2.fromOffset(430, y-6), 78, Color3.fromRGB(36,36,42))
    return btn, lbl
end
local tpBindBtn = bindButton("Teleport", 298)
local ncBindBtn = bindButton("Noclip",   326)

local function refreshBinds()
    tpBindBtn.Text = keybinds.Teleport.Name
    ncBindBtn.Text = keybinds.Noclip.Name
end
local listening: string? = nil
local function beginListen(action, btn)
    if listening then return end
    listening = action; btn.Text = "Pressâ€¦"; btn.BackgroundColor3 = Color3.fromRGB(70,70,30)
end
tpBindBtn.MouseButton1Click:Connect(function() beginListen("Teleport", tpBindBtn) end)
ncBindBtn.MouseButton1Click:Connect(function() beginListen("Noclip",   ncBindBtn) end)

UIS.InputBegan:Connect(function(inp, gp)
    if gp then return end
    if listening and inp.UserInputType==Enum.UserInputType.Keyboard then
        local kc = inp.KeyCode
        if kc ~= Enum.KeyCode.Unknown and kc ~= Enum.KeyCode.Escape then
            for k,v in pairs(keybinds) do if k~=listening and v==kc then keybinds[k]=Enum.KeyCode.Unknown end end
            keybinds[listening] = kc
            listening = nil; refreshBinds()
            tpBindBtn.BackgroundColor3 = Color3.fromRGB(36,36,42)
            ncBindBtn.BackgroundColor3 = Color3.fromRGB(36,36,42)
        end
    end
end)

UIS.InputBegan:Connect(function(inp, gp)
    if gp or listening then return end
    if inp.UserInputType==Enum.UserInputType.Keyboard then
        if keybinds.Teleport ~= Enum.KeyCode.Unknown and inp.KeyCode==keybinds.Teleport then teleportToMouse()
        elseif keybinds.Noclip ~= Enum.KeyCode.Unknown and inp.KeyCode==keybinds.Noclip then toggleNoclip()
        end
    end
end)

-- ===== VC Reconnect =====
vcBtn.MouseButton1Click:Connect(function()
    vcBtn.Text = "VC: Checkingâ€¦"
    task.spawn(function()
        local ok1, enabled = pcall(function() return VoiceChatService:IsVoiceChatEnabledForUserAsync(player.UserId) end)
        if not ok1 or not enabled then vcBtn.Text="VC disabled/banned"; vcBtn.BackgroundColor3=Color3.fromRGB(100,60,60); return end
        local ok2, perm = pcall(function() return VoiceChatService:RequestMicrophonePermissionAsync() end)
        if not ok2 or not perm then vcBtn.Text="Mic permission denied"; vcBtn.BackgroundColor3=Color3.fromRGB(100,60,60); return end
        vcBtn.Text="VC reconnected"; vcBtn.BackgroundColor3=Color3.fromRGB(40,130,255)
    end)
end)

-- ===== BTools =====
local btoolsGiven=false
local function mkTool(name:string) local t=Instance.new("Tool"); t.RequiresHandle=false; t.Name=name; t.CanBeDropped=false; return t end
btoolsBtn.MouseButton1Click:Connect(function()
    if btoolsGiven then return end; btoolsGiven=true
    local bp = player:WaitForChild("Backpack")
    -- DELETE
    local del = mkTool("BT_Delete"); del.Activated:Connect(function() local t=mouse.Target if t and not t:IsDescendantOf(player.Character) then t:Destroy() end end); del.Parent=bp
    -- CLONE
    local cln = mkTool("BT_Clone"); cln.Activated:Connect(function() local t=mouse.Target if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then local c=t:Clone(); c.CFrame=t.CFrame*CFrame.new(0,3,0); c.Parent=t.Parent end end); cln.Parent=bp
    -- MOVE
    local mv = mkTool("BT_Move"); local conn; local picked:BasePart?
    mv.Activated:Connect(function()
        local t=mouse.Target
        if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then picked=t; pcall(function() picked:SetNetworkOwner(player) end)
            conn = RunService.RenderStepped:Connect(function() local cf=mouse.Hit if picked and cf then picked.CFrame=CFrame.new(cf.X,cf.Y,cf.Z) end end)
        end end)
    mv.Deactivated:Connect(function() if conn then conn:Disconnect() conn=nil end picked=nil end)
    mv.Parent=bp
end)

-- ===== Dev Portal =====
local DEV_URL = "https://create.roblox.com/dashboard/creations"
portalBtn.MouseButton1Click:Connect(function()
    local ok = pcall(function() GuiService:OpenBrowserWindow(DEV_URL) end)
    if not ok then portalBtn.Text="Open: create.roblox.com"; task.delay(2,function() portalBtn.Text="Dev Portal" end); print("Open:", DEV_URL) end
end)

-- ===== Resets =====
resetSpeed.MouseButton1Click:Connect(function() syncWalk(SPEED_DEFAULT); applyWalk(SPEED_DEFAULT) end)
resetJump.MouseButton1Click:Connect(function()  syncJump(JUMP_DEFAULT);  applyJump(JUMP_DEFAULT)  end)

-- ===== ESP (client) =====
local function ensureHighlight(plr: Player)
    if plr == player then return end
    if not plr.Character then return end
    local h = highlights[plr]
    if not h then
        h = Instance.new("Highlight")
        h.FillTransparency = 1
        h.OutlineTransparency = 0
        h.OutlineColor = Color3.fromRGB(255, 120, 120)
        h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        h.Parent = plr.Character
        highlights[plr] = h
    end
    h.Adornee = plr.Character
end

local function clearHighlight(plr: Player)
    local h = highlights[plr]
    if h then h:Destroy(); highlights[plr] = nil end
end

local function espEnable()
    espOn = true
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= player then
            if plr.Character then ensureHighlight(plr) end
            plr.CharacterAdded:Connect(function() if espOn then task.wait(0.1); ensureHighlight(plr) end end)
        end
    end
    espBtn.Text = "Player Boxes: ON"
    espBtn.BackgroundColor3 = Color3.fromRGB(40,110,70)
end

local function espDisable()
    espOn = false
    for plr, _ in pairs(highlights) do clearHighlight(plr) end
    espBtn.Text = "Player Boxes: OFF"
    espBtn.BackgroundColor3 = Color3.fromRGB(85,85,95)
end

espBtn.MouseButton1Click:Connect(function() if espOn then espDisable() else espEnable() end end)

-- ===== Server Hitbox (size expand) =====
-- We map slider value 0..100 to a scale factor 0..(+3 studs on each axis)
local HB_MIN, HB_MAX, HB_DEFAULT = 0, 100, 0
local hbValue = HB_DEFAULT
local function applyHBValue(v:number) hbValue = v; hbVal.Text = tostring(v) end
local syncHB = connectSlider(hbBar, hbFill, hbKnob, HB_MIN, HB_MAX, HB_DEFAULT, applyHBValue)

hbApply.MouseButton1Click:Connect(function()
    if not HitboxEvent then
        warn("No server HitboxEvent found. Add the server script if you want real hitbox expansion.")
        return
    end
    HitboxEvent:FireServer("expand_all", hbValue)  -- server handles allowlist & scaling
end)
hbReset.MouseButton1Click:Connect(function()
    if HitboxEvent then HitboxEvent:FireServer("reset_all") end
    syncHB(0); applyHBValue(0)
end)

-- ===== INIT / RESPAWN =====
task.defer(function() applyWalk(SPEED_DEFAULT); applyJump(JUMP_DEFAULT) end)
player.CharacterAdded:Connect(function() task.defer(function()
    applyWalk(tonumber(walkVal.Text) or SPEED_DEFAULT)
    applyJump(tonumber(jumpVal.Text) or JUMP_DEFAULT)
    if noclipEnabled then applyNoclipOnce() end
end) end)

refreshBinds()
