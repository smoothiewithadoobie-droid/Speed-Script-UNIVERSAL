--!strict
-- Utility GUI (v2): Bigger + Minimize/Close fixed + Speed(8-500) + JumpPower + Resets
-- Teleport + Noclip (rebindable) + BTools + VC Reconnect + Dev Portal
-- LocalScript → StarterPlayer → StarterPlayerScripts

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local VoiceChatService = game:GetService("VoiceChatService")
local GuiService = game:GetService("GuiService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- ====== CONFIG ======
local SPEED_MIN, SPEED_MAX, SPEED_DEFAULT = 8, 500, 16
local JUMP_MIN,  JUMP_MAX  = 0, 200
-- Roblox defaults: most rigs use JumpPower 50 (when UseJumpPower = true)
local JUMP_DEFAULT = 50

local keybinds = {
    Teleport = Enum.KeyCode.F,
    Noclip   = Enum.KeyCode.X,
}

-- ====== STATE ======
local listeningFor: string? = nil
local noclipEnabled = false
local keepApplyConn: RBXScriptConnection? = nil
local origCanCollide: {[Instance]: boolean} = {}
local minimized = false

-- ====== HELPERS ======
local function clamp(n:number, a:number, b:number)
    if n < a then return a elseif n > b then return b else return n end
end

local function getCharacter()
    return player.Character or player.CharacterAdded:Wait()
end
local function getHumanoid(): Humanoid
    local c = getCharacter()
    return (c:FindFirstChildOfClass("Humanoid") or c:WaitForChild("Humanoid")) :: Humanoid
end
local function getHRP(): BasePart
    local c = getCharacter()
    return (c:FindFirstChild("HumanoidRootPart") or c:WaitForChild("HumanoidRootPart")) :: BasePart
end

-- ====== UI ROOT ======
local gui = Instance.new("ScreenGui")
gui.Name = "UtilityUI"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = player:WaitForChild("PlayerGui")

-- Panel (bigger)
local PANEL_W, PANEL_H = 460, 340
local TITLE_H = 44

local panel = Instance.new("Frame")
panel.Name = "Panel"
panel.Size = UDim2.fromOffset(PANEL_W, PANEL_H)
panel.Position = UDim2.fromOffset(40, 120)
panel.BackgroundColor3 = Color3.fromRGB(24,24,24)
panel.BackgroundTransparency = 0.08
panel.BorderSizePixel = 0
panel.Parent = gui
Instance.new("UICorner", panel).CornerRadius = UDim.new(0,14)
local pStroke = Instance.new("UIStroke", panel) pStroke.Thickness = 1.5 pStroke.Transparency = 0.25

-- Top bar (title area)
local topbar = Instance.new("Frame")
topbar.Name = "Topbar"
topbar.Size = UDim2.fromOffset(PANEL_W, TITLE_H)
topbar.BackgroundTransparency = 1
topbar.Parent = panel

local title = Instance.new("TextLabel")
title.BackgroundTransparency = 1
title.Text = "Utility"
title.Font = Enum.Font.GothamBold
title.TextSize = 20
title.TextColor3 = Color3.new(1,1,1)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Position = UDim2.fromOffset(14, 10)
title.Size = UDim2.fromOffset(200, 24)
title.Parent = topbar

-- Close / Minimize (always on top)
local closeBtn = Instance.new("TextButton")
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 14
closeBtn.TextColor3 = Color3.fromRGB(255,255,255)
closeBtn.Size = UDim2.fromOffset(28, 24)
closeBtn.Position = UDim2.new(1, -34, 0, 10)
closeBtn.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
closeBtn.BorderSizePixel = 0
closeBtn.AutoButtonColor = true
closeBtn.Parent = topbar
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)
closeBtn.ZIndex = 10

local minBtn = Instance.new("TextButton")
minBtn.Text = "-"
minBtn.Font = Enum.Font.GothamBold
minBtn.TextSize = 18
minBtn.TextColor3 = Color3.fromRGB(255,255,255)
minBtn.Size = UDim2.fromOffset(28, 24)
minBtn.Position = UDim2.new(1, -68, 0, 10)
minBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
minBtn.BorderSizePixel = 0
minBtn.AutoButtonColor = true
minBtn.Parent = topbar
Instance.new("UICorner", minBtn).CornerRadius = UDim.new(0,6)
minBtn.ZIndex = 10

-- Content container (everything below title goes in here)
local content = Instance.new("Frame")
content.Name = "Content"
content.Position = UDim2.fromOffset(0, TITLE_H)
content.Size = UDim2.fromOffset(PANEL_W, PANEL_H - TITLE_H)
content.BackgroundTransparency = 1
content.Parent = panel

-- Make panel draggable using topbar only
do
    local dragging=false; local dragStart; local startPos
    topbar.InputBegan:Connect(function(inp)
        if inp.UserInputType==Enum.UserInputType.MouseButton1 then
            dragging=true; dragStart=inp.Position; startPos=panel.Position
            inp.Changed:Connect(function()
                if inp.UserInputState==Enum.UserInputState.End then dragging=false end
            end)
        end
    end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement and dragStart and startPos then
            local d=inp.Position-dragStart
            panel.Position=UDim2.fromOffset(startPos.X.Offset+d.X, startPos.Y.Offset+d.Y)
        end
    end)
end

-- Minimize/Close logic (now we hide 'content' only)
closeBtn.MouseButton1Click:Connect(function()
    gui:Destroy()
end)
minBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        content.Visible = false
        panel.Size = UDim2.fromOffset(PANEL_W, TITLE_H + 8)
    else
        panel.Size = UDim2.fromOffset(PANEL_W, PANEL_H)
        content.Visible = true
    end
end)

-- ====== CONTROLS ======

-- Row 0: Noclip pill (moved under the title, right side)
local noclipBtn = Instance.new("TextButton")
noclipBtn.Name = "NoclipBtn"
noclipBtn.AnchorPoint = Vector2.new(1,0)
noclipBtn.Position = UDim2.new(1, -14, 0, 8)
noclipBtn.Size = UDim2.fromOffset(120, 28)
noclipBtn.BackgroundColor3 = Color3.fromRGB(80,30,30)
noclipBtn.Text = "Noclip: OFF"
noclipBtn.TextColor3 = Color3.new(1,1,1)
noclipBtn.Font = Enum.Font.GothamBold
noclipBtn.TextSize = 14
noclipBtn.BorderSizePixel = 0
noclipBtn.Parent = content
Instance.new("UICorner", noclipBtn).CornerRadius = UDim.new(1, 0)

-- Row 1: Walk speed label + value
local walkLabel = Instance.new("TextLabel")
walkLabel.BackgroundTransparency = 1
walkLabel.Font = Enum.Font.Gotham
walkLabel.TextSize = 14
walkLabel.TextColor3 = Color3.fromRGB(210,210,210)
walkLabel.TextXAlignment = Enum.TextXAlignment.Left
walkLabel.Text = "Walk Speed"
walkLabel.Position = UDim2.fromOffset(14, 44)
walkLabel.Size = UDim2.fromOffset(120, 18)
walkLabel.Parent = content

local walkNumLabel = Instance.new("TextLabel")
walkNumLabel.BackgroundTransparency = 1
walkNumLabel.Font = Enum.Font.Gotham
walkNumLabel.TextSize = 14
walkNumLabel.TextColor3 = Color3.fromRGB(210,210,210)
walkNumLabel.TextXAlignment = Enum.TextXAlignment.Right
walkNumLabel.Text = tostring(SPEED_DEFAULT)
walkNumLabel.Position = UDim2.new(1, -70, 0, 44)
walkNumLabel.Size = UDim2.fromOffset(56, 18)
walkNumLabel.Parent = content

-- Walk slider
local walkBar = Instance.new("Frame")
walkBar.Size = UDim2.fromOffset(PANEL_W - 40, 10)
walkBar.Position = UDim2.fromOffset(20, 66)
walkBar.BackgroundColor3 = Color3.fromRGB(50,50,50)
walkBar.BorderSizePixel = 0
walkBar.Parent = content
Instance.new("UICorner", walkBar).CornerRadius = UDim.new(0,5)

local walkFill = Instance.new("Frame")
walkFill.AnchorPoint = Vector2.new(0,0.5)
walkFill.Position = UDim2.fromScale(0,0.5)
walkFill.Size = UDim2.fromScale(0,1)
walkFill.BackgroundColor3 = Color3.fromRGB(50,200,120)
walkFill.BorderSizePixel = 0
walkFill.Parent = walkBar
Instance.new("UICorner", walkFill).CornerRadius = UDim.new(0,5)

local walkKnob = Instance.new("ImageButton")
walkKnob.AnchorPoint = Vector2.new(0.5,0.5)
walkKnob.Size = UDim2.fromOffset(16,16)
walkKnob.Position = UDim2.fromScale(0,0.5)
walkKnob.BackgroundColor3 = Color3.fromRGB(230,230,230)
walkKnob.BorderSizePixel = 0
walkKnob.Parent = walkBar
Instance.new("UICorner", walkKnob).CornerRadius = UDim.new(1,0)
local wKStroke = Instance.new("UIStroke", walkKnob) wKStroke.Thickness = 1 wKStroke.Transparency = 0.2

-- Type-in speed
local speedInput = Instance.new("TextBox")
speedInput.PlaceholderText = "Type speed (8–500)"
speedInput.Text = ""
speedInput.ClearTextOnFocus = false
speedInput.Font = Enum.Font.Gotham
speedInput.TextSize = 14
speedInput.TextColor3 = Color3.fromRGB(255,255,255)
speedInput.BackgroundColor3 = Color3.fromRGB(36,36,36)
speedInput.BorderSizePixel = 0
speedInput.Size = UDim2.fromOffset(PANEL_W - 40, 26)
speedInput.Position = UDim2.fromOffset(20, 88)
speedInput.Parent = content
Instance.new("UICorner", speedInput).CornerRadius = UDim.new(0,8)

-- Row 2: Jump Power
local jumpLabel = Instance.new("TextLabel")
jumpLabel.BackgroundTransparency = 1
jumpLabel.Font = Enum.Font.Gotham
jumpLabel.TextSize = 14
jumpLabel.TextColor3 = Color3.fromRGB(210,210,210)
jumpLabel.TextXAlignment = Enum.TextXAlignment.Left
jumpLabel.Text = "Jump Power"
jumpLabel.Position = UDim2.fromOffset(14, 124)
jumpLabel.Size = UDim2.fromOffset(120, 18)
jumpLabel.Parent = content

local jumpNum = Instance.new("TextLabel")
jumpNum.BackgroundTransparency = 1
jumpNum.Font = Enum.Font.Gotham
jumpNum.TextSize = 14
jumpNum.TextColor3 = Color3.fromRGB(210,210,210)
jumpNum.TextXAlignment = Enum.TextXAlignment.Right
jumpNum.Text = tostring(JUMP_DEFAULT)
jumpNum.Position = UDim2.new(1, -70, 0, 124)
jumpNum.Size = UDim2.fromOffset(56, 18)
jumpNum.Parent = content

local jumpBar = Instance.new("Frame")
jumpBar.Size = UDim2.fromOffset(PANEL_W - 40, 10)
jumpBar.Position = UDim2.fromOffset(20, 146)
jumpBar.BackgroundColor3 = Color3.fromRGB(50,50,50)
jumpBar.BorderSizePixel = 0
jumpBar.Parent = content
Instance.new("UICorner", jumpBar).CornerRadius = UDim.new(0,5)

local jumpFill = Instance.new("Frame")
jumpFill.AnchorPoint = Vector2.new(0,0.5)
jumpFill.Position = UDim2.fromScale(0,0.5)
jumpFill.Size = UDim2.fromScale(0,1)
jumpFill.BackgroundColor3 = Color3.fromRGB(255,170,90)
jumpFill.BorderSizePixel = 0
jumpFill.Parent = jumpBar
Instance.new("UICorner", jumpFill).CornerRadius = UDim.new(0,5)

local jumpKnob = Instance.new("ImageButton")
jumpKnob.AnchorPoint = Vector2.new(0.5,0.5)
jumpKnob.Size = UDim2.fromOffset(16,16)
jumpKnob.Position = UDim2.fromScale(0,0.5)
jumpKnob.BackgroundColor3 = Color3.fromRGB(230,230,230)
jumpKnob.BorderSizePixel = 0
jumpKnob.Parent = jumpBar
Instance.new("UICorner", jumpKnob).CornerRadius = UDim.new(1,0)
local jKStroke = Instance.new("UIStroke", jumpKnob) jKStroke.Thickness = 1 jKStroke.Transparency = 0.2

-- Row 3: Buttons (VC, BTools, Dev Portal)
local vcButton = Instance.new("TextButton")
vcButton.Font = Enum.Font.GothamBold
vcButton.TextSize = 14
vcButton.TextColor3 = Color3.new(1,1,1)
vcButton.Text = "VC Reconnect"
vcButton.Size = UDim2.fromOffset(140, 30)
vcButton.Position = UDim2.fromOffset(20, 178)
vcButton.BackgroundColor3 = Color3.fromRGB(35,125,255)
vcButton.BorderSizePixel = 0
vcButton.Parent = content
Instance.new("UICorner", vcButton).CornerRadius = UDim.new(0,8)

local btoolsButton = Instance.new("TextButton")
btoolsButton.Font = Enum.Font.GothamBold
btoolsButton.TextSize = 14
btoolsButton.TextColor3 = Color3.new(1,1,1)
btoolsButton.Text = "Give BTools"
btoolsButton.Size = UDim2.fromOffset(140, 30)
btoolsButton.Position = UDim2.fromOffset(170, 178)
btoolsButton.BackgroundColor3 = Color3.fromRGB(120, 170, 60)
btoolsButton.BorderSizePixel = 0
btoolsButton.Parent = content
Instance.new("UICorner", btoolsButton).CornerRadius = UDim.new(0,8)

local devPortalBtn = Instance.new("TextButton")
devPortalBtn.Font = Enum.Font.GothamBold
devPortalBtn.TextSize = 14
devPortalBtn.TextColor3 = Color3.new(1,1,1)
devPortalBtn.Text = "Dev Portal"
devPortalBtn.Size = UDim2.fromOffset(140, 30)
devPortalBtn.Position = UDim2.fromOffset(320, 178)
devPortalBtn.BackgroundColor3 = Color3.fromRGB(90, 90, 160)
devPortalBtn.BorderSizePixel = 0
devPortalBtn.Parent = content
Instance.new("UICorner", devPortalBtn).CornerRadius = UDim.new(0,8)

-- Row 4: Resets
local resetSpeedBtn = Instance.new("TextButton")
resetSpeedBtn.Font = Enum.Font.GothamBold
resetSpeedBtn.TextSize = 14
resetSpeedBtn.TextColor3 = Color3.new(1,1,1)
resetSpeedBtn.Text = "Reset Speed"
resetSpeedBtn.Size = UDim2.fromOffset(140, 30)
resetSpeedBtn.Position = UDim2.fromOffset(20, 214)
resetSpeedBtn.BackgroundColor3 = Color3.fromRGB(120, 70, 70)
resetSpeedBtn.BorderSizePixel = 0
resetSpeedBtn.Parent = content
Instance.new("UICorner", resetSpeedBtn).CornerRadius = UDim.new(0,8)

local resetJumpBtn = Instance.new("TextButton")
resetJumpBtn.Font = Enum.Font.GothamBold
resetJumpBtn.TextSize = 14
resetJumpBtn.TextColor3 = Color3.new(1,1,1)
resetJumpBtn.Text = "Reset Jump"
resetJumpBtn.Size = UDim2.fromOffset(140, 30)
resetJumpBtn.Position = UDim2.fromOffset(170, 214)
resetJumpBtn.BackgroundColor3 = Color3.fromRGB(120, 70, 70)
resetJumpBtn.BorderSizePixel = 0
resetJumpBtn.Parent = content
Instance.new("UICorner", resetJumpBtn).CornerRadius = UDim.new(0,8)

-- Row 5: Keybinds
local kbTitle = Instance.new("TextLabel")
kbTitle.BackgroundTransparency = 1
kbTitle.Font = Enum.Font.GothamBold
kbTitle.TextSize = 14
kbTitle.TextColor3 = Color3.fromRGB(255,255,255)
kbTitle.TextXAlignment = Enum.TextXAlignment.Left
kbTitle.Text = "Keybinds"
kbTitle.Position = UDim2.fromOffset(14, 254)
kbTitle.Size = UDim2.fromOffset(100, 18)
kbTitle.Parent = content

local function newBindRow(labelText:string, x:number, y:number)
    local lbl = Instance.new("TextLabel")
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 14
    lbl.TextColor3 = Color3.fromRGB(210,210,210)
    lbl.Text = labelText
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Position = UDim2.fromOffset(x, y)
    lbl.Size = UDim2.fromOffset(80, 24)
    lbl.Parent = content

    local btn = Instance.new("TextButton")
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Text = "..."
    btn.Size = UDim2.fromOffset(80, 24)
    btn.Position = UDim2.fromOffset(x+86, y)
    btn.BackgroundColor3 = Color3.fromRGB(36,36,36)
    btn.BorderSizePixel = 0
    btn.Parent = content
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)
    local stroke = Instance.new("UIStroke", btn) stroke.Thickness = 1 stroke.Transparency = 0.4
    return btn
end

local tpBindBtn = newBindRow("Teleport", 14, 276)
local ncBindBtn = newBindRow("Noclip",   170, 276)

-- ====== SLIDER WIRING ======
local function alphaFromClick(frame:Frame, xPixel:number)
    return clamp((xPixel - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
end

local function connectSlider(bar:Frame, fill:Frame, knob:ImageButton, minV:number, maxV:number, defaultV:number, onSet:(number)->())
    local function toAlpha(v:number) return (v - minV) / (maxV - minV) end
    local function fromAlpha(a:number) return math.floor(minV + a*(maxV-minV) + 0.5) end
    local function setAlpha(a:number)
        a = clamp(a, 0, 1)
        fill.Size = UDim2.fromScale(a, 1)
        knob.Position = UDim2.fromScale(a, 0.5)
        onSet(fromAlpha(a))
    end
    setAlpha(toAlpha(defaultV))
    bar.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            setAlpha(alphaFromClick(bar, inp.Position.X))
        end
    end)
    local dragging=false
    knob.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=true end end)
    knob.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=false end end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement then
            setAlpha(alphaFromClick(bar, inp.Position.X))
        end
    end)
    return function(v:number)
        setAlpha(toAlpha(v))
    end
end

-- Walk speed slider
local function applyWalkSpeed(v:number)
    walkNumLabel.Text = tostring(v)
    local hum = getHumanoid()
    hum.WalkSpeed = v
end
local syncWalkUI = connectSlider(walkBar, walkFill, walkKnob, SPEED_MIN, SPEED_MAX, SPEED_DEFAULT, applyWalkSpeed)

-- Jump power slider
local function applyJump(v:number)
    jumpNum.Text = tostring(v)
    local hum = getHumanoid()
    hum.UseJumpPower = true
    hum.JumpPower = v
end
local syncJumpUI = connectSlider(jumpBar, jumpFill, jumpKnob, JUMP_MIN, JUMP_MAX, JUMP_DEFAULT, applyJump)

-- Type-in speed
speedInput.FocusLost:Connect(function()
    local n = tonumber(speedInput.Text)
    if n then
        n = clamp(math.floor(n + 0.5), SPEED_MIN, SPEED_MAX)
        syncWalkUI(n)
        applyWalkSpeed(n)
    end
    speedInput.Text = ""
end)

-- ====== TELEPORT ======
local function teleportToMouse()
    local hrp = getHRP()
    local hit = mouse.Hit
    if hit then
        local targetPos = Vector3.new(hit.X, hit.Y + 3, hit.Z)
        hrp.CFrame = CFrame.new(targetPos, targetPos + hrp.CFrame.LookVector)
    end
end

-- ====== NOCLIP ======
local function applyNoclipOnce()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") then
            if origCanCollide[d] == nil then
                origCanCollide[d] = d.CanCollide
            end
            d.CanCollide = false
        end
    end
end

local function restoreCollision()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") and origCanCollide[d] ~= nil then
            d.CanCollide = origCanCollide[d]
        end
    end
    origCanCollide = {}
end

local function startNoclip()
    if noclipEnabled then return end
    noclipEnabled = true
    noclipBtn.Text = "Noclip: ON"
    noclipBtn.BackgroundColor3 = Color3.fromRGB(30,90,50)
    applyNoclipOnce()
    keepApplyConn = RunService.Heartbeat:Connect(function()
        if noclipEnabled then applyNoclipOnce() end
    end)
end

local function stopNoclip()
    if not noclipEnabled then return end
    noclipEnabled = false
    noclipBtn.Text = "Noclip: OFF"
    noclipBtn.BackgroundColor3 = Color3.fromRGB(80,30,30)
    if keepApplyConn then keepApplyConn:Disconnect() keepApplyConn=nil end
    restoreCollision()
end

local function toggleNoclip()
    if noclipEnabled then stopNoclip() else startNoclip() end
end

noclipBtn.MouseButton1Click:Connect(toggleNoclip)

-- ====== KEYBINDS ======
local function keycodeToText(kc: Enum.KeyCode): string
    return kc.Name
end
local function refreshBindButtons()
    tpBindBtn.Text = keycodeToText(keybinds.Teleport)
    ncBindBtn.Text = keycodeToText(keybinds.Noclip)
end
refreshBindButtons()

local function startListen(actionName:string, btn: TextButton)
    if listeningFor then return end
    listeningFor = actionName
    btn.Text = "Press key..."
    btn.BackgroundColor3 = Color3.fromRGB(70,70,30)
end

tpBindBtn.MouseButton1Click:Connect(function() startListen("Teleport", tpBindBtn) end)
ncBindBtn.MouseButton1Click:Connect(function() startListen("Noclip",   ncBindBtn) end)

UIS.InputBegan:Connect(function(inp, gp)
    if gp then return end
    if listeningFor and inp.UserInputType == Enum.UserInputType.Keyboard then
        local picked = inp.KeyCode
        if picked == Enum.KeyCode.Unknown or picked == Enum.KeyCode.Escape then return end
        for action, kc in pairs(keybinds) do
            if action ~= listeningFor and kc == picked then
                keybinds[action] = Enum.KeyCode.Unknown
            end
        end
        keybinds[listeningFor] = picked
        listeningFor = nil
        refreshBindButtons()
        tpBindBtn.BackgroundColor3 = Color3.fromRGB(36,36,36)
        ncBindBtn.BackgroundColor3 = Color3.fromRGB(36,36,36)
    end
end)

UIS.InputBegan:Connect(function(inp, gp)
    if gp or listeningFor then return end
    if inp.UserInputType == Enum.UserInputType.Keyboard then
        if keybinds.Teleport ~= Enum.KeyCode.Unknown and inp.KeyCode == keybinds.Teleport then
            teleportToMouse()
        elseif keybinds.Noclip ~= Enum.KeyCode.Unknown and inp.KeyCode == keybinds.Noclip then
            toggleNoclip()
        end
    end
end)

-- ====== VC RECONNECT (cannot bypass bans) ======
local function vcReconnect()
    vcButton.Text = "VC: Checking..."
    task.spawn(function()
        local ok1, enabled = pcall(function()
            return VoiceChatService:IsVoiceChatEnabledForUserAsync(player.UserId)
        end)
        if not ok1 or not enabled then
            vcButton.Text = "VC disabled/banned"
            vcButton.BackgroundColor3 = Color3.fromRGB(100,60,60)
            return
        end
        local ok2, perm = pcall(function()
            return VoiceChatService:RequestMicrophonePermissionAsync()
        end)
        if not ok2 or not perm then
            vcButton.Text = "Mic permission denied"
            vcButton.BackgroundColor3 = Color3.fromRGB(100,60,60)
            return
        end
        vcButton.Text = "VC reconnected"
        vcButton.BackgroundColor3 = Color3.fromRGB(35,125,255)
    end)
end
vcButton.MouseButton1Click:Connect(vcReconnect)

-- ====== BTOOLS ======
local btoolsGiven = false
local function mkTool(name:string)
    local t = Instance.new("Tool")
    t.RequiresHandle = false
    t.Name = name
    t.CanBeDropped = false
    return t
end

local function giveBTools()
    if btoolsGiven then return end
    btoolsGiven = true
    local backpack = player:WaitForChild("Backpack")

    -- DELETE
    local delTool = mkTool("BT_Delete")
    delTool.Activated:Connect(function()
        local target = mouse.Target
        if target and target:IsDescendantOf(workspace) and not target:IsDescendantOf(player.Character) then
            target:Destroy()
        end
    end)
    delTool.Parent = backpack

    -- CLONE
    local cloneTool = mkTool("BT_Clone")
    cloneTool.Activated:Connect(function()
        local target = mouse.Target
        if target and target:IsA("BasePart") and not target:IsDescendantOf(player.Character) then
            local c = target:Clone()
            c.CFrame = target.CFrame * CFrame.new(0, 3, 0)
            c.Parent = target.Parent
        end
    end)
    cloneTool.Parent = backpack

    -- MOVE
    local moveTool = mkTool("BT_Move")
    local movingConn: RBXScriptConnection? = nil
    local picked: BasePart? = nil
    moveTool.Activated:Connect(function()
        picked = mouse.Target
        if picked and picked:IsA("BasePart") and not picked:IsDescendantOf(player.Character) then
            picked.Anchored = false
            pcall(function() picked:SetNetworkOwner(player) end)
            movingConn = RunService.RenderStepped:Connect(function()
                if not picked then return end
                local cf = mouse.Hit
                if cf then picked.CFrame = CFrame.new(cf.X, cf.Y, cf.Z) end
            end)
        end
    end)
    moveTool.Deactivated:Connect(function()
        if movingConn then movingConn:Disconnect() movingConn=nil end
        picked = nil
    end)
    moveTool.Parent = backpack
end
btoolsButton.MouseButton1Click:Connect(giveBTools)

-- ====== DEV PORTAL ======
local DEV_URL = "https://create.roblox.com/dashboard/creations"
devPortalBtn.MouseButton1Click:Connect(function()
    local ok = pcall(function()
        GuiService:OpenBrowserWindow(DEV_URL)
    end)
    if not ok then
        -- Fallback: just change text briefly so the user sees it
        devPortalBtn.Text = "Open: create.roblox.com"
        task.delay(2, function() devPortalBtn.Text = "Dev Portal" end)
        print("Open this URL:", DEV_URL)
    end
end)

-- ====== RESET BUTTONS ======
resetSpeedBtn.MouseButton1Click:Connect(function()
    syncWalkUI(SPEED_DEFAULT)
    applyWalkSpeed(SPEED_DEFAULT)
end)
resetJumpBtn.MouseButton1Click:Connect(function()
    syncJumpUI(JUMP_DEFAULT)
    applyJump(JUMP_DEFAULT)
end)

-- ====== INIT / RESPAWN ======
task.defer(function()
    -- Apply defaults
    applyWalkSpeed(SPEED_DEFAULT)
    applyJump(JUMP_DEFAULT)
end)

player.CharacterAdded:Connect(function()
    task.defer(function()
        applyWalkSpeed(tonumber(walkNumLabel.Text) or SPEED_DEFAULT)
        applyJump(tonumber(jumpNum.Text) or JUMP_DEFAULT)
        if noclipEnabled then applyNoclipOnce() end
    end)
end)
