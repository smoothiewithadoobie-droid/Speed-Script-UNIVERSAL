--!strict
-- Smoothies Script Hub
-- FULL single-file LocalScript (StarterPlayer -> StarterPlayerScripts)
-- WARNING: This script includes aimbot/ESP DEV tools intended ONLY FOR YOUR OWN PLACE.
-- Do NOT use these features to target players in games you don't own.
-- By default the aim locks to CollectionService-tagged models with tag "Target".
-- If you want to include players, set ALLOW_PLAYER_LOCK = true (only in your own place).

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")
local GuiService = game:GetService("GuiService")
local RunServiceHeartbeat = RunService.Heartbeat
local camera = workspace.CurrentCamera

local player = Players.LocalPlayer

-- ========== CONFIG ==========
local SPEED_MIN, SPEED_MAX, SPEED_DEFAULT = 8, 500, 16
local JUMP_MIN,  JUMP_MAX,  JUMP_DEFAULT = 0, 200, 50
local DEFAULT_UI_SCALE = 1
local TARGET_TAG = "Target"            -- tag your NPC/dummies with this
local ALLOW_PLAYER_LOCK = false       -- set true ONLY in your own place if you want to include players
local PANIC_KEY = Enum.KeyCode.RightAlt
local DEV_PORTAL_URL = "https://create.roblox.com/dashboard/creations"
local DISCORD_INVITE = "https://discord.gg/WwADpVwRvu"
local OWNER_USERIDS = {} -- optional: list of userIds allowed to open the menu; leave empty for all

-- ========== STATE ==========
local unloaded = false
local noclipEnabled = false
local noclipConn: RBXScriptConnection? = nil
local origCanCollide: {[Instance]: boolean} = {}
local btoolsGiven = false
local espOn = false
local linesOn = false
local highlights: {[Instance]: Highlight} = {}
local nameTags: {[Instance]: BillboardGui} = {}
local lineGui: ScreenGui? = nil
local aimHolding = false
local aimSmoothing = 0.22 -- 0..1 (higher = snap), user adjustable in UI
local aimFOV = 150 -- pixels radius around screen center
local aimIncludePlayers = false -- toggled by user only in own place
local aimDistanceCap = 1000 -- studs
local settingsAttributeName = "SmoothiesSettings"

-- default keybinds (can rebind in UI)
local keybinds = {
    Teleport = Enum.KeyCode.F,
    Noclip = Enum.KeyCode.X,
    AimHold = Enum.KeyCode.E,
    Panic = PANIC_KEY
}

-- Utility functions
local function clamp(n, a, b) return (n<a and a) or (n>b and b) or n end
local function getCharacter() return player.Character or player.CharacterAdded:Wait() end
local function getHumanoid()
    local c = getCharacter()
    return (c:FindFirstChildOfClass("Humanoid") or c:WaitForChild("Humanoid")) :: Humanoid
end
local function getHRP()
    local c = getCharacter()
    return (c:FindFirstChild("HumanoidRootPart") or c:WaitForChild("HumanoidRootPart")) :: BasePart
end
local function headOf(model: Model)
    if not model then return nil end
    local h = model:FindFirstChild("Head")
    if h and h:IsA("BasePart") then return h end
    -- fallback: humanoid root part
    local hum = model:FindFirstChildOfClass("Humanoid")
    if hum and hum.RootPart then return hum.RootPart end
    return nil
end

-- ===== Session settings persistence (player attributes) =====
local HttpService = game:GetService("HttpService")
local function saveSettingsToPlayer(attrs: table)
    local ok, js = pcall(function() return HttpService:JSONEncode(attrs) end)
    if ok then
        pcall(function() player:SetAttribute(settingsAttributeName, js) end)
    end
end
local function loadSettingsFromPlayer()
    local js = player:GetAttribute(settingsAttributeName)
    if typeof(js) == "string" then
        local ok, tbl = pcall(function() return HttpService:JSONDecode(js) end)
        if ok and type(tbl) == "table" then
            return tbl
        end
    end
    return nil
end

-- ===== Create GUI root but start hidden while loading intro =====
local function buildGui()
    local root = Instance.new("ScreenGui")
    root.Name = "SmoothiesScriptHub"
    root.IgnoreGuiInset = true
    root.ResetOnSpawn = false
    root.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    root.Parent = player:WaitForChild("PlayerGui")
    return root
end

local gui = buildGui()
gui.Enabled = false -- will enable after loading intro

-- ========== LOADING INTRO ==========
local function showIntroAndLoad(onComplete)
    local scr = Instance.new("Frame")
    scr.Size = UDim2.fromScale(1,1)
    scr.Position = UDim2.fromScale(0,0)
    scr.BackgroundColor3 = Color3.fromRGB(10,10,10)
    scr.BorderSizePixel = 0
    scr.Parent = gui

    local box = Instance.new("Frame")
    box.Size = UDim2.fromOffset(520, 120)
    box.Position = UDim2.fromScale(0.5,0.5) - UDim2.fromOffset(260,60)
    box.BackgroundColor3 = Color3.fromRGB(26,26,26)
    box.Parent = scr
    Instance.new("UICorner", box).CornerRadius = UDim.new(0,10)

    local title = Instance.new("TextLabel")
    title.BackgroundTransparency = 1
    title.Text = "Smoothies Script Hub"
    title.Font = Enum.Font.GothamBold
    title.TextSize = 22
    title.TextColor3 = Color3.new(1,1,1)
    title.Position = UDim2.fromOffset(16, 10)
    title.Size = UDim2.fromOffset(480, 30)
    title.Parent = box

    local sub = Instance.new("TextLabel")
    sub.BackgroundTransparency = 1
    sub.Text = "Loading script..."
    sub.Font = Enum.Font.Gotham
    sub.TextSize = 14
    sub.TextColor3 = Color3.fromRGB(180,180,180)
    sub.Position = UDim2.fromOffset(16, 44)
    sub.Size = UDim2.fromOffset(480, 20)
    sub.Parent = box

    local barBG = Instance.new("Frame")
    barBG.BackgroundColor3 = Color3.fromRGB(40,40,40)
    barBG.Size = UDim2.fromOffset(480, 14)
    barBG.Position = UDim2.fromOffset(16, 74)
    barBG.Parent = box
    Instance.new("UICorner", barBG).CornerRadius = UDim.new(0,7)

    local barFill = Instance.new("Frame")
    barFill.BackgroundColor3 = Color3.fromRGB(70,200,150)
    barFill.Size = UDim2.fromScale(0,1)
    barFill.Position = UDim2.fromScale(0,0)
    barFill.Parent = barBG
    Instance.new("UICorner", barFill).CornerRadius = UDim.new(0,7)

    -- Simulate a loading progression (but also run onComplete)
    gui.Enabled = true
    local progress = 0
    local step = 0.12
    local totalSteps = 1/step
    task.spawn(function()
        for i=1, totalSteps do
            if unloaded then return end
            progress = i * step
            barFill.Size = UDim2.fromScale(clamp(progress,0,1), 1)
            task.wait(0.06)
        end
        task.wait(0.15)
        if onComplete then onComplete() end
        scr:Destroy()
    end)
end

-- ========== BUILD THE MAIN UI (sidebar) ==========
local WINDOW_W, WINDOW_H = 760, 480
local TITLE_H = 48
local SIDEBAR_W = 180

local panel, header, body, sidebar, pages
do
    -- main panel
    panel = Instance.new("Frame")
    panel.Size = UDim2.fromOffset(WINDOW_W, WINDOW_H)
    panel.Position = UDim2.fromOffset(60, 80)
    panel.BackgroundColor3 = Color3.fromRGB(22,22,22)
    panel.BorderSizePixel = 0
    panel.Parent = gui
    Instance.new("UICorner", panel).CornerRadius = UDim.new(0,12)

    -- header
    header = Instance.new("Frame")
    header.Size = UDim2.fromOffset(WINDOW_W, TITLE_H)
    header.BackgroundColor3 = Color3.fromRGB(28,28,28)
    header.BorderSizePixel = 0
    header.Parent = panel
    Instance.new("UICorner", header).CornerRadius = UDim.new(0,12)

    -- title text
    local title = Instance.new("TextLabel")
    title.BackgroundTransparency = 1
    title.Text = "Smoothies Script Hub"
    title.Font = Enum.Font.GothamBold
    title.TextSize = 20
    title.TextColor3 = Color3.new(1,1,1)
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Position = UDim2.fromOffset(16, 12)
    title.Size = UDim2.fromOffset(420, 24)
    title.Parent = header

    -- header buttons
    local function topBtn(txt, offsetX, bg)
        local b = Instance.new("TextButton")
        b.Text = txt
        b.Font = Enum.Font.GothamBold
        b.TextSize = 16
        b.TextColor3 = Color3.fromRGB(255,255,255)
        b.Size = UDim2.fromOffset(28, 26)
        b.Position = UDim2.new(1, offsetX, 0, 11)
        b.BackgroundColor3 = bg
        b.BorderSizePixel = 0
        b.Parent = header
        Instance.new("UICorner", b).CornerRadius = UDim.new(0,6)
        return b
    end
    local minBtn  = topBtn("-", -68, Color3.fromRGB(90,90,90))
    local closeBtn= topBtn("X", -34, Color3.fromRGB(180,60,60))

    -- body & sidebar
    body = Instance.new("Frame")
    body.Position = UDim2.fromOffset(0, TITLE_H)
    body.Size = UDim2.fromOffset(WINDOW_W, WINDOW_H - TITLE_H)
    body.BackgroundTransparency = 1
    body.Parent = panel

    sidebar = Instance.new("Frame")
    sidebar.Size = UDim2.fromOffset(SIDEBAR_W, WINDOW_H - TITLE_H)
    sidebar.Position = UDim2.fromOffset(0, 0)
    sidebar.BackgroundColor3 = Color3.fromRGB(26,26,26)
    sidebar.BorderSizePixel = 0
    sidebar.Parent = body

    local sideList = Instance.new("UIListLayout", sidebar)
    sideList.SortOrder = Enum.SortOrder.LayoutOrder
    sideList.Padding = UDim.new(0, 8)

    local function sideBtn(txt)
        local b = Instance.new("TextButton")
        b.Text = txt
        b.Font = Enum.Font.GothamBold
        b.TextSize = 16
        b.TextColor3 = Color3.new(1,1,1)
        b.Size = UDim2.fromOffset(SIDEBAR_W, 44)
        b.BackgroundColor3 = Color3.fromRGB(40,40,40)
        b.BorderSizePixel = 0
        b.Parent = sidebar
        Instance.new("UICorner", b).CornerRadius = UDim.new(0,6)
        return b
    end

    local btnMain = sideBtn("Main")
    local btnAimbot = sideBtn("Aimbot (Dev)")
    local btnCredits = sideBtn("Credits")

    pages = Instance.new("Frame")
    pages.Size = UDim2.fromOffset(WINDOW_W - SIDEBAR_W, WINDOW_H - TITLE_H)
    pages.Position = UDim2.fromOffset(SIDEBAR_W, 0)
    pages.BackgroundTransparency = 1
    pages.Parent = body

    local function makePage()
        local f = Instance.new("Frame")
        f.BackgroundTransparency = 1
        f.Size = UDim2.fromScale(1,1)
        f.Visible = false
        f.Parent = pages
        return f
    end

    local pageMain = makePage()
    local pageAimbot = makePage()
    local pageCredits = makePage()

    local function showPage(which)
        for _,child in ipairs(pages:GetChildren()) do
            if child:IsA("Frame") then
                child.Visible = (child == which)
            end
        end
    end
    showPage(pageMain)

    btnMain.MouseButton1Click:Connect(function() showPage(pageMain) end)
    btnAimbot.MouseButton1Click:Connect(function() showPage(pageAimbot) end)
    btnCredits.MouseButton1Click:Connect(function() showPage(pageCredits) end)

    -- small builder helpers
    local function label(parent, txt, size, y, bold)
        local l = Instance.new("TextLabel")
        l.BackgroundTransparency = 1
        l.Font = (bold and Enum.Font.GothamBold) or Enum.Font.Gotham
        l.TextSize = size
        l.Text = txt
        l.TextColor3 = Color3.fromRGB(235,235,235)
        l.TextXAlignment = Enum.TextXAlignment.Left
        l.Position = UDim2.fromOffset(16, y)
        l.Size = UDim2.fromOffset(520, size + 8)
        l.Parent = parent
        return l
    end
    local function pill(parent, txt, x, y, w, color)
        local b = Instance.new("TextButton")
        b.Text = txt
        b.Font = Enum.Font.GothamBold
        b.TextSize = 14
        b.TextColor3 = Color3.new(1,1,1)
        b.Position = UDim2.fromOffset(x,y)
        b.Size = UDim2.fromOffset(w, 32)
        b.BackgroundColor3 = color
        b.BorderSizePixel = 0
        b.Parent = parent
        Instance.new("UICorner", b).CornerRadius = UDim.new(1,0)
        return b
    end
    local function bar(parent, x, y, w)
        local track = Instance.new("Frame")
        track.BackgroundColor3 = Color3.fromRGB(55,55,55)
        track.BorderSizePixel = 0
        track.Position = UDim2.fromOffset(x, y)
        track.Size = UDim2.fromOffset(w, 10)
        track.Parent = parent
        Instance.new("UICorner", track).CornerRadius = UDim.new(0,5)
        local fill = Instance.new("Frame")
        fill.AnchorPoint = Vector2.new(0,0.5)
        fill.Position = UDim2.fromScale(0,0.5)
        fill.Size = UDim2.fromScale(0,1)
        fill.BackgroundColor3 = Color3.fromRGB(60,200,130)
        fill.BorderSizePixel = 0
        fill.Parent = track
        Instance.new("UICorner", fill).CornerRadius = UDim.new(0,5)
        local knob = Instance.new("ImageButton")
        knob.AnchorPoint = Vector2.new(0.5,0.5)
        knob.Size = UDim2.fromOffset(16,16)
        knob.Position = UDim2.fromScale(0,0.5)
        knob.BackgroundColor3 = Color3.fromRGB(235,235,235)
        knob.BorderSizePixel = 0
        knob.Parent = track
        Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
        return track, fill, knob
    end

    -- ===== PAGE: MAIN (walk/jump etc) =====
    do
        label(pageMain, "Main", 20, 10, true)
        label(pageMain, "Walk Speed", 14, 48)
        local walkValLabel = label(pageMain, tostring(SPEED_DEFAULT), 14, 48)
        walkValLabel.Position = UDim2.fromOffset(WINDOW_W - SIDEBAR_W - 80, 48)
        walkValLabel.TextXAlignment = Enum.TextXAlignment.Right

        local walkTrack, walkFill, walkKnob = bar(pageMain, 16, 70, WINDOW_W - SIDEBAR_W - 32)

        local speedBox = Instance.new("TextBox")
        speedBox.PlaceholderText = "Type speed (8–500)"
        speedBox.Text = ""
        speedBox.ClearTextOnFocus = false
        speedBox.Font = Enum.Font.Gotham
        speedBox.TextSize = 14
        speedBox.TextColor3 = Color3.fromRGB(255,255,255)
        speedBox.BackgroundColor3 = Color3.fromRGB(36,36,36)
        speedBox.BorderSizePixel = 0
        speedBox.Size = UDim2.fromOffset(WINDOW_W - SIDEBAR_W - 32, 28)
        speedBox.Position = UDim2.fromOffset(16, 96)
        speedBox.Parent = pageMain
        Instance.new("UICorner", speedBox).CornerRadius = UDim.new(0,8)

        label(pageMain, "Jump Power", 14, 136)
        local jumpValLabel = label(pageMain, tostring(JUMP_DEFAULT), 14, 136)
        jumpValLabel.Position = UDim2.fromOffset(WINDOW_W - SIDEBAR_W - 80, 136)
        jumpValLabel.TextXAlignment = Enum.TextXAlignment.Right

        local jumpTrack, jumpFill, jumpKnob = bar(pageMain, 16, 158, WINDOW_W - SIDEBAR_W - 32)
        jumpFill.BackgroundColor3 = Color3.fromRGB(255,170,90)

        local teleportBtn = pill(pageMain, "Teleport (keybind)", 16, 200, 200, Color3.fromRGB(90,90,160))
        local noclipBtn = pill(pageMain, "Noclip: OFF", 232, 200, 200, Color3.fromRGB(85,35,35))
        local btoolsBtn = pill(pageMain, "Give BTools", 448, 200, 200, Color3.fromRGB(120,170,60))

        local resetSpeed = pill(pageMain, "Reset Speed", 16, 244, 200, Color3.fromRGB(130,70,70))
        local resetJump = pill(pageMain, "Reset Jump", 232, 244, 200, Color3.fromRGB(130,70,70))
        local portalBtn = pill(pageMain, "Dev Portal", 448, 244, 200, Color3.fromRGB(90,90,160))

        -- bookmarks (teleport save)
        label(pageMain, "Teleport Bookmarks", 14, 290)
        local bmAdd = pill(pageMain, "Add Bookmark (current)", 16, 314, 240, Color3.fromRGB(60,120,100))
        local bmListFrame = Instance.new("ScrollingFrame")
        bmListFrame.Size = UDim2.fromOffset(WINDOW_W - SIDEBAR_W - 48, 110)
        bmListFrame.Position = UDim2.fromOffset(16, 354)
        bmListFrame.BackgroundTransparency = 1
        bmListFrame.BorderSizePixel = 0
        bmListFrame.CanvasSize = UDim2.new(0,0,0,0)
        bmListFrame.Parent = pageMain
        local listLayout = Instance.new("UIListLayout", bmListFrame)
        listLayout.Padding = UDim.new(0,6)
        listLayout.SortOrder = Enum.SortOrder.LayoutOrder

        -- keybind display
        label(pageMain, "Keybinds", 14, 474, true)
        local tpBindBtn = pill(pageMain, "Teleport: "..keybinds.Teleport.Name, 16, 500, 240, Color3.fromRGB(40,40,40))
        local ncBindBtn = pill(pageMain, "Noclip: "..keybinds.Noclip.Name, 272, 500, 240, Color3.fromRGB(40,40,40))

        -- UI SCALE / THEME / FPS
        local uiScaleLabel = label(pageMain, "UI Scale", 14, 548)
        local uiScaleTrack, uiScaleFill, uiScaleKnob = bar(pageMain, 16, 570, 220)
        local themeBtn = pill(pageMain, "Toggle Theme", 260, 570, 200, Color3.fromRGB(90,90,120))

        local fpsLabel = label(pageMain, "FPS: --", 14, 620) -- will be updated

        -- slider plumbing
        local function connectSlider(track, fill, knob, minV, maxV, defaultV, onSet)
            local function toAlpha(v) return (v - minV) / (maxV - minV) end
            local function fromAlpha(a) return math.floor(minV + a*(maxV-minV) + 0.5) end
            local function setAlpha(a)
                a = clamp(a, 0, 1)
                fill.Size = UDim2.fromScale(a, 1)
                knob.Position = UDim2.fromScale(a, 0.5)
                onSet(fromAlpha(a))
            end
            setAlpha(toAlpha(defaultV))
            track.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    setAlpha(clamp((inp.Position.X - track.AbsolutePosition.X)/track.AbsoluteSize.X, 0, 1))
                end
            end)
            local dragging = false
            knob.InputBegan:Connect(function(inp) if inp.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end end)
            knob.InputEnded:Connect(function(inp) if inp.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end end)
            UIS.InputChanged:Connect(function(inp)
                if dragging and inp.UserInputType == Enum.UserInputType.MouseMovement then
                    setAlpha(clamp((inp.Position.X - track.AbsolutePosition.X)/track.AbsoluteSize.X, 0, 1))
                end
            end)
            return function(v) setAlpha(toAlpha(v)) end
        end

        local function applyWalk(v) getHumanoid().WalkSpeed = v; walkValLabel.Text = tostring(v) end
        local function applyJump(v) local h = getHumanoid(); h.UseJumpPower = true; h.JumpPower = v; jumpValLabel.Text = tostring(v) end

        local setWalk = connectSlider(walkTrack, walkFill, walkKnob, SPEED_MIN, SPEED_MAX, SPEED_DEFAULT, applyWalk)
        local setJump = connectSlider(jumpTrack, jumpFill, jumpKnob, JUMP_MIN, JUMP_MAX, JUMP_DEFAULT, applyJump)

        -- speed box
        speedBox.FocusLost:Connect(function()
            if unloaded then return end
            local n = tonumber(speedBox.Text)
            if n then n = clamp(math.floor(n + 0.5), SPEED_MIN, SPEED_MAX); setWalk(n); applyWalk(n) end
            speedBox.Text = ""
        end)

        resetSpeed.MouseButton1Click:Connect(function() setWalk(SPEED_DEFAULT); applyWalk(SPEED_DEFAULT) end)
        resetJump.MouseButton1Click:Connect(function() setJump(JUMP_DEFAULT); applyJump(JUMP_DEFAULT) end)

        -- bookmarks handlers
        local bookmarks = {}
        local function rebuildBookmarks()
            for _,v in ipairs(bmListFrame:GetChildren()) do if v:IsA("TextButton") or v:IsA("TextLabel") then v:Destroy() end end
            for i,entry in ipairs(bookmarks) do
                local b = Instance.new("TextButton")
                b.Text = entry.name .. " — " .. math.floor(entry.pos.Y) .. "Y"
                b.Size = UDim2.fromOffset(bmListFrame.AbsoluteSize.X - 10, 28)
                b.BackgroundColor3 = Color3.fromRGB(36,36,36)
                b.TextColor3 = Color3.new(1,1,1)
                b.Font = Enum.Font.Gotham
                b.TextSize = 14
                b.Parent = bmListFrame
                b.TextXAlignment = Enum.TextXAlignment.Left
                Instance.new("UICorner", b).CornerRadius = UDim.new(0,6)
                b.MouseButton1Click:Connect(function()
                    local hrp = getHRP()
                    hrp.CFrame = CFrame.new(entry.pos + Vector3.new(0,3,0))
                end)
            end
            bmListFrame.CanvasSize = UDim2.new(0, 0, 0, listLayout.AbsoluteContentSize.Y)
        end

        bmAdd.MouseButton1Click:Connect(function()
            if unloaded then return end
            local hrp = getHRP()
            local pos = hrp.Position
            table.insert(bookmarks, {name = "Bookmark "..(#bookmarks+1), pos = pos})
            rebuildBookmarks()
        end)

        -- bind change
        local listening = nil
        local function beginListen(actionName, btn)
            if listening then return end
            listening = actionName
            btn.Text = actionName..": Press..."
            btn.BackgroundColor3 = Color3.fromRGB(70,70,30)
        end

        tpBindBtn.MouseButton1Click:Connect(function() beginListen("Teleport", tpBindBtn) end)
        ncBindBtn.MouseButton1Click:Connect(function() beginListen("Noclip", ncBindBtn) end)

        -- UI scale
        local uiScale = DEFAULT_UI_SCALE
        local setUiScale = connectSlider(uiScaleTrack, uiScaleFill, uiScaleKnob, 0.6, 1.6, DEFAULT_UI_SCALE, function(v)
            uiScale = v
            panel.Size = UDim2.fromOffset(WINDOW_W * uiScale, WINDOW_H * uiScale)
            panel.Position = UDim2.fromOffset(60, 80)
        end)

        themeBtn.MouseButton1Click:Connect(function()
            -- simple theme swap: invert colors
            -- quick simple toggle: swap panel bg to lighter
            if panel.BackgroundColor3 == Color3.fromRGB(22,22,22) then
                panel.BackgroundColor3 = Color3.fromRGB(250,250,250)
                header.BackgroundColor3 = Color3.fromRGB(240,240,240)
            else
                panel.BackgroundColor3 = Color3.fromRGB(22,22,22)
                header.BackgroundColor3 = Color3.fromRGB(28,28,28)
            end
        end)

        -- FPS counter
        do
            local last = tick()
            local frames = 0
            RunService.RenderStepped:Connect(function()
                frames = frames + 1
                if tick() - last >= 1 then
                    fpsLabel.Text = "FPS: "..tostring(frames)
                    frames = 0; last = tick()
                end
            end)
        end

        -- Noclip functionality (cleanup done elsewhere)
        local function applyNoclipOnce()
            local char = getCharacter()
            for _, d in ipairs(char:GetDescendants()) do
                if d:IsA("BasePart") then
                    if origCanCollide[d] == nil then origCanCollide[d] = d.CanCollide end
                    d.CanCollide = false
                end
            end
        end
        local function restoreCollision()
            local char = getCharacter()
            for _, d in ipairs(char:GetDescendants()) do
                if d:IsA("BasePart") and origCanCollide[d] ~= nil then
                    d.CanCollide = origCanCollide[d]
                end
            end
            origCanCollide = {}
        end
        local function startNoclip()
            if noclipEnabled then return end
            noclipEnabled = true
            noclipBtn.Text = "Noclip: ON"
            noclipBtn.BackgroundColor3 = Color3.fromRGB(40,110,70)
            applyNoclipOnce()
            noclipConn = RunServiceHeartbeat:Connect(function() if noclipEnabled then applyNoclipOnce() end end)
        end
        local function stopNoclip()
            if not noclipEnabled then return end
            noclipEnabled = false
            noclipBtn.Text = "Noclip: OFF"
            noclipBtn.BackgroundColor3 = Color3.fromRGB(85,35,35)
            if noclipConn then noclipConn:Disconnect(); noclipConn = nil end
            restoreCollision()
        end
        noclipBtn.MouseButton1Click:Connect(function() if unloaded then return end if noclipEnabled then stopNoclip() else startNoclip() end end)

        -- BTools
        local function mkTool(name)
            local t = Instance.new("Tool")
            t.RequiresHandle = false
            t.Name = name
            t.CanBeDropped = false
            return t
        end
        btoolsBtn.MouseButton1Click:Connect(function()
            if unloaded or btoolsGiven then return end
            btoolsGiven = true
            local bp = player:WaitForChild("Backpack")
            local del = mkTool("BT_Delete")
            del.Activated:Connect(function() local t = mouse.Target; if t and not t:IsDescendantOf(player.Character) then t:Destroy() end end)
            del.Parent = bp
            local cln = mkTool("BT_Clone")
            cln.Activated:Connect(function() local t = mouse.Target; if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then local c = t:Clone(); c.CFrame = t.CFrame * CFrame.new(0,3,0); c.Parent = t.Parent end end)
            cln.Parent = bp
            local mv = mkTool("BT_Move")
            local conn; local picked
            mv.Activated:Connect(function()
                local t = mouse.Target
                if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then
                    picked = t
                    pcall(function() picked:SetNetworkOwner(player) end)
                    conn = RunService.RenderStepped:Connect(function() local cf = mouse.Hit if picked and cf then picked.CFrame = CFrame.new(cf.X, cf.Y, cf.Z) end end)
                end
            end)
            mv.Deactivated:Connect(function() if conn then conn:Disconnect(); conn = nil end picked = nil end)
            mv.Parent = bp
        end)

        -- dev portal
        portalBtn.MouseButton1Click:Connect(function()
            if unloaded then return end
            local ok = pcall(function() GuiService:OpenBrowserWindow(DEV_PORTAL_URL) end)
            if not ok then print("Open in browser:", DEV_PORTAL_URL) end
        end)

        -- teleport (keybind)
        local function teleportToMouse()
            local hrp = getHRP()
            local hit = mouse.Hit
            if hit then
                local p3 = Vector3.new(hit.X, hit.Y + 3, hit.Z)
                hrp.CFrame = CFrame.new(p3, p3 + hrp.CFrame.LookVector)
            end
        end

        -- binding listening
        UIS.InputBegan:Connect(function(inp, gp)
            if gp or unloaded then return end
            if inp.UserInputType == Enum.UserInputType.Keyboard then
                if listening and inp.KeyCode ~= Enum.KeyCode.Unknown and inp.KeyCode ~= Enum.KeyCode.Escape then
                    if listening == "Teleport" then keybinds.Teleport = inp.KeyCode; tpBindBtn.Text = "Teleport: "..inp.KeyCode.Name end
                    if listening == "Noclip" then keybinds.Noclip = inp.KeyCode; ncBindBtn.Text = "Noclip: "..inp.KeyCode.Name end
                    listening = nil
                elseif inp.KeyCode == keybinds.Teleport then teleportToMouse()
                elseif inp.KeyCode == keybinds.Noclip then
                    if noclipEnabled then stopNoclip() else startNoclip() end
                end
            end
        end)

        tpBindBtn.MouseButton1Click:Connect(function() beginListen("Teleport", tpBindBtn) end)
        ncBindBtn.MouseButton1Click:Connect(function() beginListen("Noclip", ncBindBtn) end)
    end

    -- ===== PAGE: AIMBOT (DEV) =====
    do
        label(pageAimbot, "Aimbot (Dev Tools)", 18, 10, true)
        label(pageAimbot, "Hold the key to aim the CAMERA at nearest target's head. (Tags: '"..TARGET_TAG.."')", 14, 46)

        local aimBindBtn = pill(pageAimbot, "Aim Hold: "..keybinds.AimHold.Name, 16, 84, 260, Color3.fromRGB(40,40,40))
        local fovLabel = label(pageAimbot, "FOV (pixels)", 14, 124)
        local fovTrack, fovFill, fovKnob = bar(pageAimbot, 16, 146, WINDOW_W - SIDEBAR_W - 64)
        local smoothingLabel = label(pageAimbot, "Smoothing (0..1, lower = slower)", 14, 186)
        local smoothTrack, smoothFill, smoothKnob = bar(pageAimbot, 16, 208, WINDOW_W - SIDEBAR_W - 64)
        local includePlayersBtn = pill(pageAimbot, "Include Players: OFF", 16, 260, 200, Color3.fromRGB(85,85,95))
        local distCapLabel = label(pageAimbot, "Distance cap (studs)", 14, 308)
        local distTrack, distFill, distKnob = bar(pageAimbot, 16, 330, WINDOW_W - SIDEBAR_W - 64)
        local espToggle = pill(pageAimbot, "ESP: OFF", 16, 386, 160, Color3.fromRGB(85,85,95))
        local linesToggle = pill(pageAimbot, "Lines: OFF", 188, 386, 160, Color3.fromRGB(85,85,95))
        local clearESPBtn = pill(pageAimbot, "Clear ESP", 360, 386, 160, Color3.fromRGB(120,60,60))

        -- slider plumbing
        local function connectSlider(track, fill, knob, minV, maxV, defaultV, onSet)
            local function toAlpha(v) return (v - minV) / (maxV - minV) end
            local function fromAlpha(a) return math.floor(minV + a*(maxV-minV) + 0.5) end
            local function setAlpha(a)
                a = clamp(a, 0, 1)
                fill.Size = UDim2.fromScale(a, 1)
                knob.Position = UDim2.fromScale(a, 0.5)
                onSet(fromAlpha(a))
            end
            setAlpha(toAlpha(defaultV))
            track.InputBegan:Connect(function(inp)
                if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                    setAlpha(clamp((inp.Position.X - track.AbsolutePosition.X)/track.AbsoluteSize.X, 0, 1))
                end
            end)
            local dragging = false
            knob.InputBegan:Connect(function(inp) if inp.UserInputType == Enum.UserInputType.MouseButton1 then dragging = true end end)
            knob.InputEnded:Connect(function(inp) if inp.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end end)
            UIS.InputChanged:Connect(function(inp)
                if dragging and inp.UserInputType == Enum.UserInputType.MouseMovement then
                    setAlpha(clamp((inp.Position.X - track.AbsolutePosition.X)/track.AbsoluteSize.X, 0, 1))
                end
            end)
            return function(v) setAlpha(toAlpha(v)) end
        end

        local function setFOV(px) aimFOV = px; fovLabel.Text = "FOV (pixels): "..tostring(px) end
        local setFOVSlider = connectSlider(fovTrack, fovFill, fovKnob, 50, 600, aimFOV, setFOV)

        local function setSmoothing(v) aimSmoothing = v; smoothingLabel.Text = "Smoothing: "..tostring(v) end
        local setSmoothSlider = connectSlider(smoothTrack, smoothFill, smoothKnob, 0, 1, aimSmoothing, function(v) setSmoothing(v/100) end)
        -- note: smoothing slider returns 0..100; we normalize to 0..1

        local function setDistCap(v) aimDistanceCap = v; distCapLabel.Text = "Distance cap (studs): "..tostring(v) end
        local setDistSlider = connectSlider(distTrack, distFill, distKnob, 50, 5000, aimDistanceCap, setDistCap)

        -- include players toggle (requires you set ALLOW_PLAYER_LOCK true if you want to actually lock players)
        local function updateIncludePlayersUI()
            includePlayersBtn.Text = "Include Players: "..(aimIncludePlayers and "ON" or "OFF")
            includePlayersBtn.BackgroundColor3 = aimIncludePlayers and Color3.fromRGB(40,110,70) or Color3.fromRGB(85,85,95)
        end
        includePlayersBtn.MouseButton1Click:Connect(function()
            aimIncludePlayers = not aimIncludePlayers
            updateIncludePlayersUI()
        end)
        updateIncludePlayersUI()

        -- ESP toggles
        espToggle.MouseButton1Click:Connect(function()
            espOn = not espOn
            espToggle.Text = "ESP: "..(espOn and "ON" or "OFF")
            espToggle.BackgroundColor3 = espOn and Color3.fromRGB(40,110,70) or Color3.fromRGB(85,85,95)
        end)
        linesToggle.MouseButton1Click:Connect(function()
            linesOn = not linesOn
            linesToggle.Text = "Lines: "..(linesOn and "ON" or "OFF")
            linesToggle.BackgroundColor3 = linesOn and Color3.fromRGB(40,110,70) or Color3.fromRGB(85,85,95)
            if not linesOn and lineGui then lineGui:Destroy(); lineGui = nil end
        end)
        clearESPBtn.MouseButton1Click:Connect(function() -- clear created GUI
            for k,v in pairs(highlights) do if v then v:Destroy() end end; highlights = {}
            for k,v in pairs(nameTags) do if v then v:Destroy() end end; nameTags = {}
            if lineGui then lineGui:Destroy(); lineGui = nil end
        end)

        -- aim bind change
        local listeningBind = nil
        aimBindBtn.MouseButton1Click:Connect(function()
            if listeningBind then return end
            listeningBind = true; aimBindBtn.Text = "Press key..."
            local conn
            conn = UIS.InputBegan:Connect(function(inp, gp)
                if gp then return end
                if inp.UserInputType == Enum.UserInputType.Keyboard then
                    keybinds.AimHold = inp.KeyCode
                    aimBindBtn.Text = "Aim Hold: "..inp.KeyCode.Name
                    listeningBind = nil
                    conn:Disconnect()
                end
            end)
        end)
    end

    -- ===== PAGE: CREDITS =====
    do
        label(pageCredits, "Credits", 20, 12, true)
        label(pageCredits, "Smoothalicious was here", 16, 48)
        local discordBtn = pill(pageCredits, "Join Discord (copy invite)", 16, 92, 320, Color3.fromRGB(90,120,200))
        label(pageCredits, "Discord invite will be copied to clipboard if available.", 14, 140)

        -- copy to clipboard (best-effort)
        discordBtn.MouseButton1Click:Connect(function()
            if unloaded then return end
            local ok, err = pcall(function()
                if setclipboard then
                    setclipboard(DISCORD_INVITE)
                else
                    error("setclipboard unavailable")
                end
            end)
            if ok then
                discordBtn.Text = "Invite Copied!"
                task.delay(1.6, function() if discordBtn then discordBtn.Text = "Join Discord (copy invite)" end end)
            else
                -- fallback: try GuiService.OpenBrowserWindow or print
                local opened = pcall(function() GuiService:OpenBrowserWindow(DISCORD_INVITE) end)
                if not opened then
                    print("Discord invite:", DISCORD_INVITE)
                    discordBtn.Text = "Invite (printed)"
                    task.delay(1.6, function() if discordBtn then discordBtn.Text = "Join Discord (copy invite)" end end)
                end
            end
        end)
    end

    -- header drag + minimize + close + panic
    do
        local dragging=false; local dragStart; local startPos
        header.InputBegan:Connect(function(inp)
            if inp.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging=true; dragStart=inp.Position; startPos=panel.Position
                inp.Changed:Connect(function() if inp.UserInputState == Enum.UserInputState.End then dragging=false end end)
            end
        end)
        UIS.InputChanged:Connect(function(inp)
            if dragging and inp.UserInputType == Enum.UserInputType.MouseMovement and dragStart and startPos then
                local d = inp.Position - dragStart
                panel.Position = UDim2.fromOffset(startPos.X.Offset + d.X, startPos.Y.Offset + d.Y)
            end
        end)

        minBtn.MouseButton1Click:Connect(function()
            pages.Visible = not pages.Visible
            sidebar.Visible = not sidebar.Visible
            if pages.Visible then
                panel.Size = UDim2.fromOffset(WINDOW_W, WINDOW_H)
            else
                panel.Size = UDim2.fromOffset(WINDOW_W, TITLE_H + 10)
            end
        end)

        local overlayConfirm = Instance.new("Frame")
        overlayConfirm.Visible = false
        overlayConfirm.BackgroundColor3 = Color3.new(0,0,0)
        overlayConfirm.BackgroundTransparency = 0.35
        overlayConfirm.Size = UDim2.fromScale(1,1)
        overlayConfirm.Parent = panel

        local box = Instance.new("Frame")
        box.Size = UDim2.fromOffset(360,120)
        box.Position = UDim2.new(0.5,-180,0.5,-60)
        box.BackgroundColor3 = Color3.fromRGB(30,30,30)
        box.ZIndex = 50
        box.Parent = overlayConfirm
        Instance.new("UICorner", box).CornerRadius = UDim.new(0,10)

        local txt = Instance.new("TextLabel")
        txt.BackgroundTransparency = 1
        txt.Text = "Are you sure you want to unload?"
        txt.Font = Enum.Font.GothamBold
        txt.TextSize = 18
        txt.TextColor3 = Color3.new(1,1,1)
        txt.Position = UDim2.fromOffset(12, 14)
        txt.Parent = box

        local yesBtn = pill(box, "Yes, unload", 12, 72, 160, Color3.fromRGB(180,60,60))
        local noBtn = pill(box, "No, keep open", 188, 72, 160, Color3.fromRGB(80,80,90))

        closeBtn.MouseButton1Click:Connect(function() overlayConfirm.Visible = true end)
        noBtn.MouseButton1Click:Connect(function() overlayConfirm.Visible = false end)
        yesBtn.MouseButton1Click:Connect(function()
            overlayConfirm.Visible = false
            -- full cleanup
            if not unloaded then
                unloaded = true
                -- restore collisions, speeds, remove created objects, remove btools
                for _,h in pairs(highlights) do if h then h:Destroy() end end; highlights = {}
                for _,bb in pairs(nameTags) do if bb then bb:Destroy() end end; nameTags = {}
                if lineGui then lineGui:Destroy(); lineGui = nil end
                if noclipConn then noclipConn:Disconnect(); noclipConn = nil end
                noclipEnabled = false
                -- reset speed/jump
                pcall(function() local h = getHumanoid(); h.WalkSpeed = SPEED_DEFAULT; h.UseJumpPower = true; h.JumpPower = JUMP_DEFAULT end)
                -- remove tools
                local bp = player:FindFirstChildOfClass("Backpack")
                if bp then for _,t in ipairs(bp:GetChildren()) do if t:IsA("Tool") and t.Name:sub(1,3) == "BT_" then t:Destroy() end end end
                -- destroy gui
                gui:Destroy()
            end
        end)

        -- panic hotkey
        UIS.InputBegan:Connect(function(inp, gp)
            if gp or unloaded then return end
            if inp.KeyCode == keybinds.Panic then
                -- immediate unload
                if not unloaded then
                    unloaded = true
                    for _,h in pairs(highlights) do if h then h:Destroy() end end; highlights = {}
                    for _,bb in pairs(nameTags) do if bb then bb:Destroy() end end; nameTags = {}
                    if lineGui then lineGui:Destroy(); lineGui = nil end
                    if noclipConn then noclipConn:Disconnect(); noclipConn = nil end
                    noclipEnabled = false
                    pcall(function() local h = getHumanoid(); h.WalkSpeed = SPEED_DEFAULT; h.UseJumpPower = true; h.JumpPower = JUMP_DEFAULT end)
                    local bp = player:FindFirstChildOfClass("Backpack")
                    if bp then for _,t in ipairs(bp:GetChildren()) do if t:IsA("Tool") and t.Name:sub(1,3) == "BT_" then t:Destroy() end end end
                    gui:Destroy()
                end
            end
        end)
    end
end

-- ========== AIM & ESP RUN LOOP ==========
local function ensureLineGui()
    if lineGui and lineGui.Parent then return end
    lineGui = Instance.new("ScreenGui")
    lineGui.Name = "SmoothiesAimLines"
    lineGui.Parent = gui
    lineGui.ResetOnSpawn = false
    lineGui.IgnoreGuiInset = true
end

local function drawTransientLine(start2, finish2, life)
    ensureLineGui()
    local dx = finish2 - start2
    local length = dx.Magnitude
    local angle = math.deg(math.atan2(dx.Y, dx.X))
    local line = Instance.new("Frame")
    line.AnchorPoint = Vector2.new(0, 0.5)
    line.Position = UDim2.fromOffset(start2.X, start2.Y)
    line.Size = UDim2.fromOffset(length, 2)
    line.BackgroundColor3 = Color3.fromRGB(255,120,120)
    line.BorderSizePixel = 0
    line.Rotation = angle
    line.Parent = lineGui
    game:GetService("Debris"):AddItem(line, life or 0.03)
end

local function ensureHighlightFor(model)
    if not model or not model.Parent then return end
    if highlights[model] and highlights[model].Parent then return end
    local h = Instance.new("Highlight")
    h.FillTransparency = 1
    h.OutlineTransparency = 0
    h.OutlineColor = Color3.fromRGB(255,120,120)
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.Parent = model
    highlights[model] = h
end

local function ensureNameFor(part, nameText)
    if not part or not part.Parent then return end
    local bb = nameTags[part]
    if not bb then
        bb = Instance.new("BillboardGui")
        bb.Size = UDim2.fromOffset(160, 28)
        bb.StudsOffset = Vector3.new(0, 2.8, 0)
        bb.AlwaysOnTop = true
        bb.Parent = part
        local t = Instance.new("TextLabel")
        t.Size = UDim2.fromScale(1,1)
        t.BackgroundTransparency = 0.2
        t.BackgroundColor3 = Color3.fromRGB(30,30,30)
        t.Font = Enum.Font.GothamBold
        t.TextSize = 14
        t.TextColor3 = Color3.new(1,1,1)
        t.Text = nameText
        t.Parent = bb
        Instance.new("UICorner", t).CornerRadius = UDim.new(0,8)
        nameTags[part] = bb
    else
        local t = bb:FindFirstChildWhichIsA("TextLabel")
        if t then t.Text = nameText end
    end
end

local function getPotentialTargets()
    local targets = {}
    for _, obj in ipairs(CollectionService:GetTagged(TARGET_TAG)) do
        if obj:IsA("Model") then table.insert(targets, obj) end
        if obj:IsA("BasePart") and obj.Parent and obj.Parent:IsA("Model") then table.insert(targets, obj.Parent) end
    end
    if ALLOW_PLAYER_LOCK and aimIncludePlayers then
        for _, pl in ipairs(Players:GetPlayers()) do
            if pl ~= player and pl.Character then table.insert(targets, pl.Character) end
        end
    end
    return targets
end

RunService.RenderStepped:Connect(function()
    if unloaded then return end

    -- ESP
    if espOn then
        local targets = getPotentialTargets()
        for _, model in ipairs(targets) do
            local head = headOf(model)
            if head then
                ensureHighlightFor(model)
                local dist = (head.Position - getHRP().Position).Magnitude
                ensureNameFor(head, model.Name.." — "..tostring(math.floor(dist)).."m")
            end
        end
    end

    -- lines transient
    if linesOn then
        local targets = getPotentialTargets()
        for _, model in ipairs(targets) do
            local head = headOf(model)
            if head then
                local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
                if onScreen then
                    local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
                    local target2 = Vector2.new(screenPos.X, screenPos.Y)
                    drawTransientLine(center, target2, 0.04)
                end
            end
        end
    end

    -- Aim hold camera smooth locking
    if aimHolding then
        local best = nil
        local bestScreenDist = math.huge
        for _, model in ipairs(getPotentialTargets()) do
            local head = headOf(model)
            if head then
                local dist = (head.Position - getHRP().Position).Magnitude
                if dist <= aimDistanceCap then
                    local screenPos, onScreen = camera:WorldToViewportPoint(head.Position)
                    if onScreen then
                        local center = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
                        local d = (Vector2.new(screenPos.X, screenPos.Y) - center).Magnitude
                        if d <= aimFOV and d < bestScreenDist then
                            best = head
                            bestScreenDist = d
                        end
                    end
                end
            end
        end
        if best then
            -- smoothing: lerp camera CFrame toward lookAt
            local camPos = camera.CFrame.Position
            local targetCFrame = CFrame.new(camPos, best.Position)
            camera.CFrame = camera.CFrame:Lerp(targetCFrame, clamp(aimSmoothing, 0, 1))
        end
    end
end)

-- Input handling: aiming, binding changes, teleport, noclip, etc.
UIS.InputBegan:Connect(function(inp, gp)
    if gp or unloaded then return end
    if inp.UserInputType == Enum.UserInputType.Keyboard then
        if inp.KeyCode == keybinds.AimHold then aimHolding = true end
        if inp.KeyCode == keybinds.Teleport then
            local hrp = getHRP(); local hit = mouse.Hit
            if hit then hrp.CFrame = CFrame.new(Vector3.new(hit.X, hit.Y + 3, hit.Z)) end
        end
        if inp.KeyCode == keybinds.Noclip then
            if noclipEnabled then
                noclipEnabled = false
                if noclipConn then noclipConn:Disconnect(); noclipConn = nil end
                for _,d in ipairs(getCharacter():GetDescendants()) do if d:IsA("BasePart") and origCanCollide[d] ~= nil then d.CanCollide = origCanCollide[d] end end
                origCanCollide = {}
            else
                noclipEnabled = true
                for _, d in ipairs(getCharacter():GetDescendants()) do if d:IsA("BasePart") then origCanCollide[d] = d.CanCollide; d.CanCollide = false end end
                noclipConn = RunServiceHeartbeat:Connect(function() for _, d in ipairs(getCharacter():GetDescendants()) do if d:IsA("BasePart") then d.CanCollide = false end end end)
            end
        end
    end
end)
UIS.InputEnded:Connect(function(inp, gp)
    if gp or unloaded then return end
    if inp.UserInputType == Enum.UserInputType.Keyboard then
        if inp.KeyCode == keybinds.AimHold then aimHolding = false end
    end
end)

-- ========== LOAD/INIT SETTINGS ==========
task.spawn(function()
    local existing = loadSettingsFromPlayer()
    if existing then
        if existing.walk then
            pcall(function() local h = getHumanoid(); h.WalkSpeed = existing.walk end)
        end
        if existing.jump then
            pcall(function() local h = getHumanoid(); h.UseJumpPower = true; h.JumpPower = existing.jump end)
        end
        if existing.keybinds then
            for k,v in pairs(existing.keybinds) do
                if keybinds[k] ~= nil and typeof(v) == "string" then
                    local ok, enumVal = pcall(function() return Enum.KeyCode[v] end)
                    if ok and enumVal then keybinds[k] = enumVal end
                end
            end
        end
    end
end)

-- Show loading intro, then enable GUI
showIntroAndLoad(function()
    if unloaded then return end
    gui.Enabled = true
    -- initial defaults
    pcall(function() local h = getHumanoid(); h.WalkSpeed = SPEED_DEFAULT; h.UseJumpPower = true; h.JumpPower = JUMP_DEFAULT end)
end)
