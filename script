--!strict
-- Smoothies Script — Sidebar Menu (Main / Aimbot / Credits)  — for YOUR OWN GAME ONLY
-- Main: Walk Speed, Jump Power, Resets, Teleport, Noclip, BTools, Dev Portal
-- Aimbot (Dev Tools): Hold key to aim camera at nearest TAGGED "Target" (NPC/dummy). Optional include players you own.
-- Credits: "Smoothalicious was here" + Discord button (opens browser)
-- NOTE: Do not use to cheat in other experiences.

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CollectionService = game:GetService("CollectionService")
local GuiService = game:GetService("GuiService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()
local camera = workspace.CurrentCamera

-- ===== CONFIG =====
local SPEED_MIN, SPEED_MAX, SPEED_DEFAULT = 8, 500, 16
local JUMP_MIN,  JUMP_MAX,  JUMP_DEFAULT = 0, 200, 50
local keybinds = {
    Teleport = Enum.KeyCode.F,
    Noclip   = Enum.KeyCode.X,
    AimHold  = Enum.KeyCode.E, -- hold to aim (Aimbot page)
}
local TARGET_TAG = "Target"          -- Tag NPCs/dummies with this to allow lock-on
local ALLOW_PLAYER_LOCK = false       -- set true ONLY in your own place if you want to include other players
local DEV_PORTAL_URL = "https://create.roblox.com/dashboard/creations"
local DISCORD_INVITE = "https://discord.gg/WwADpVwRvu"

-- ===== STATE =====
local minimized = false
local listening: string? = nil
local noclipEnabled = false
local keepApplyConn: RBXScriptConnection? = nil
local origCanCollide: {[Instance]: boolean} = {}
local espOn = false
local highlights: { [Instance]: Highlight } = {}
local nameTags: { [Instance]: BillboardGui } = {}
local lineGui: ScreenGui? = nil
local aimHolding = false
local unloaded = false

-- ===== HELPERS =====
local function clamp(n:number, a:number, b:number) return (n<a and a) or (n>b and b) or n end
local function getCharacter() return player.Character or player.CharacterAdded:Wait() end
local function getHumanoid(): Humanoid
    local c = getCharacter()
    return (c:FindFirstChildOfClass("Humanoid") or c:WaitForChild("Humanoid")) :: Humanoid
end
local function getHRP(): BasePart
    local c = getCharacter()
    return (c:FindFirstChild("HumanoidRootPart") or c:WaitForChild("HumanoidRootPart")) :: BasePart
end
local function headOf(model: Model): BasePart?
    local h = model:FindFirstChild("Head")
    if h and h:IsA("BasePart") then return h end
    local hum = model:FindFirstChildOfClass("Humanoid")
    if hum and hum.RootPart then return hum.RootPart end
    return nil
end

-- ===== UI ROOT (Sidebar layout) =====
local gui = Instance.new("ScreenGui")
gui.Name = "SmoothiesScriptUI"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = player:WaitForChild("PlayerGui")

local WINDOW_W, WINDOW_H = 720, 460
local TITLE_H = 48
local SIDEBAR_W = 160

local panel = Instance.new("Frame")
panel.Size = UDim2.fromOffset(WINDOW_W, WINDOW_H)
panel.Position = UDim2.fromOffset(60, 80)
panel.BackgroundColor3 = Color3.fromRGB(22,22,22)
panel.BorderSizePixel = 0
panel.Parent = gui
Instance.new("UICorner", panel).CornerRadius = UDim.new(0,12)

-- header
local header = Instance.new("Frame")
header.Size = UDim2.fromOffset(WINDOW_W, TITLE_H)
header.BackgroundColor3 = Color3.fromRGB(28,28,28)
header.BorderSizePixel = 0
header.Parent = panel
Instance.new("UICorner", header).CornerRadius = UDim.new(0,12)

local title = Instance.new("TextLabel")
title.BackgroundTransparency = 1
title.Text = "Smoothies Script"
title.Font = Enum.Font.GothamBold
title.TextSize = 20
title.TextColor3 = Color3.new(1,1,1)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Position = UDim2.fromOffset(16, 12)
title.Size = UDim2.fromOffset(320, 24)
title.Parent = header

local function topBtn(txt, offsetX, bg)
    local b = Instance.new("TextButton")
    b.Text = txt
    b.Font = Enum.Font.GothamBold
    b.TextSize = 16
    b.TextColor3 = Color3.fromRGB(255,255,255)
    b.Size = UDim2.fromOffset(28, 26)
    b.Position = UDim2.new(1, offsetX, 0, 11)
    b.BackgroundColor3 = bg
    b.BorderSizePixel = 0
    b.Parent = header
    Instance.new("UICorner", b).CornerRadius = UDim.new(0,6)
    return b
end
local minBtn  = topBtn("-", -68, Color3.fromRGB(90,90,90))
local closeBtn= topBtn("X", -34, Color3.fromRGB(180,60,60))

-- content area
local body = Instance.new("Frame")
body.Position = UDim2.fromOffset(0, TITLE_H)
body.Size = UDim2.fromOffset(WINDOW_W, WINDOW_H - TITLE_H)
body.BackgroundTransparency = 1
body.Parent = panel

-- sidebar
local sidebar = Instance.new("Frame")
sidebar.Size = UDim2.fromOffset(SIDEBAR_W, WINDOW_H - TITLE_H)
sidebar.Position = UDim2.fromOffset(0, 0)
sidebar.BackgroundColor3 = Color3.fromRGB(26,26,26)
sidebar.BorderSizePixel = 0
sidebar.Parent = body

local sideList = Instance.new("UIListLayout", sidebar)
sideList.SortOrder = Enum.SortOrder.LayoutOrder
sideList.Padding = UDim.new(0, 8)

local function sideBtn(txt)
    local b = Instance.new("TextButton")
    b.Text = txt
    b.Font = Enum.Font.GothamBold
    b.TextSize = 16
    b.TextColor3 = Color3.new(1,1,1)
    b.Size = UDim2.fromOffset(SIDEBAR_W, 40)
    b.BackgroundColor3 = Color3.fromRGB(40,40,40)
    b.BorderSizePixel = 0
    b.Parent = sidebar
    return b
end
local btnMain    = sideBtn("Main")
local btnAimbot  = sideBtn("Aimbot")
local btnCredits = sideBtn("Credits")

-- page container
local pages = Instance.new("Frame")
pages.Size = UDim2.fromOffset(WINDOW_W - SIDEBAR_W, WINDOW_H - TITLE_H)
pages.Position = UDim2.fromOffset(SIDEBAR_W, 0)
pages.BackgroundTransparency = 1
pages.Parent = body

local function makePage()
    local f = Instance.new("Frame")
    f.BackgroundTransparency = 1
    f.Size = UDim2.fromScale(1,1)
    f.Visible = false
    f.Parent = pages
    return f
end

local pageMain    = makePage()
local pageAimbot  = makePage()
local pageCredits = makePage()

local function showPage(which: Frame)
    for _,child in ipairs(pages:GetChildren()) do
        if child:IsA("Frame") then child.Visible = (child == which) end
    end
end
showPage(pageMain)

btnMain.MouseButton1Click:Connect(function() showPage(pageMain) end)
btnAimbot.MouseButton1Click:Connect(function() showPage(pageAimbot) end)
btnCredits.MouseButton1Click:Connect(function() showPage(pageCredits) end)

-- ========= SHARED BUILDERS =========
local function label(parent:Instance, txt:string, size:number, bold:boolean, color:Color3?, y:number)
    local l = Instance.new("TextLabel")
    l.BackgroundTransparency = 1
    l.Font = bold and Enum.Font.GothamBold or Enum.Font.Gotham
    l.TextSize = size
    l.Text = txt
    l.TextColor3 = color or Color3.fromRGB(235,235,235)
    l.TextXAlignment = Enum.TextXAlignment.Left
    l.Position = UDim2.fromOffset(16, y)
    l.Size = UDim2.fromOffset(500, size+8)
    l.Parent = parent
    return l
end

local function bar(parent:Instance, x:number, y:number, w:number)
    local track = Instance.new("Frame")
    track.BackgroundColor3 = Color3.fromRGB(55,55,55)
    track.BorderSizePixel = 0
    track.Position = UDim2.fromOffset(x, y)
    track.Size = UDim2.fromOffset(w, 10)
    track.Parent = parent
    Instance.new("UICorner", track).CornerRadius = UDim.new(0,5)
    local fill = Instance.new("Frame")
    fill.AnchorPoint = Vector2.new(0,0.5)
    fill.Position = UDim2.fromScale(0,0.5)
    fill.Size = UDim2.fromScale(0,1)
    fill.BackgroundColor3 = Color3.fromRGB(60,200,130)
    fill.BorderSizePixel = 0
    fill.Parent = track
    Instance.new("UICorner", fill).CornerRadius = UDim.new(0,5)
    local knob = Instance.new("ImageButton")
    knob.AnchorPoint = Vector2.new(0.5,0.5)
    knob.Size = UDim2.fromOffset(16,16)
    knob.Position = UDim2.fromScale(0,0.5)
    knob.BackgroundColor3 = Color3.fromRGB(235,235,235)
    knob.BorderSizePixel = 0
    knob.Parent = track
    Instance.new("UICorner", knob).CornerRadius = UDim.new(1,0)
    return track, fill, knob
end

local function connectSlider(track:Frame, fill:Frame, knob:ImageButton, minV:number, maxV:number, defaultV:number, onSet:(number)->())
    local function clamp01(a:number) return clamp(a,0,1) end
    local function toAlpha(v:number) return (v - minV)/(maxV-minV) end
    local function fromAlpha(a:number) return math.floor(minV + a*(maxV-minV) + 0.5) end
    local function setAlpha(a:number)
        a = clamp01(a); fill.Size = UDim2.fromScale(a,1); knob.Position = UDim2.fromScale(a,0.5); onSet(fromAlpha(a))
    end
    local function alphaFromX(x:number)
        return clamp01((x - track.AbsolutePosition.X) / track.AbsoluteSize.X)
    end
    setAlpha(toAlpha(defaultV))
    track.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then setAlpha(alphaFromX(inp.Position.X)) end end)
    local dragging=false
    knob.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=true end end)
    knob.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=false end end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement then setAlpha(alphaFromX(inp.Position.X)) end
    end)
    return function(v:number) setAlpha(toAlpha(v)) end
end

local function pill(parent:Instance, txt:string, x:number, y:number, w:number, color:Color3)
    local b = Instance.new("TextButton")
    b.Text = txt
    b.Font = Enum.Font.GothamBold
    b.TextSize = 14
    b.TextColor3 = Color3.new(1,1,1)
    b.Position = UDim2.fromOffset(x,y)
    b.Size = UDim2.fromOffset(w, 30)
    b.BackgroundColor3 = color
    b.BorderSizePixel = 0
    b.Parent = parent
    Instance.new("UICorner", b).CornerRadius = UDim.new(1,0)
    return b
end

-- ========= MAIN PAGE =========
label(pageMain, "Main", 20, true, nil, 12)

local walkLbl = label(pageMain, "Walk Speed", 14, false, nil, 56)
local walkVal = label(pageMain, tostring(SPEED_DEFAULT), 14, false, Color3.fromRGB(200,200,200), 56)
walkVal.Position = UDim2.fromOffset(520-24, 56); walkVal.TextXAlignment = Enum.TextXAlignment.Right
local walkTrack, walkFill, walkKnob = bar(pageMain, 16, 76, 520)

local speedBox = Instance.new("TextBox")
speedBox.PlaceholderText = "Type speed (8–500)"
speedBox.Text = ""
speedBox.ClearTextOnFocus = false
speedBox.Font = Enum.Font.Gotham
speedBox.TextSize = 14
speedBox.TextColor3 = Color3.fromRGB(255,255,255)
speedBox.BackgroundColor3 = Color3.fromRGB(36,36,36)
speedBox.BorderSizePixel = 0
speedBox.Size = UDim2.fromOffset(520, 28)
speedBox.Position = UDim2.fromOffset(16, 100)
speedBox.Parent = pageMain
Instance.new("UICorner", speedBox).CornerRadius = UDim.new(0,8)

local jumpLbl = label(pageMain, "Jump Power", 14, false, nil, 140)
local jumpVal = label(pageMain, tostring(JUMP_DEFAULT), 14, false, Color3.fromRGB(200,200,200), 140)
jumpVal.Position = UDim2.fromOffset(520-24, 140); jumpVal.TextXAlignment = Enum.TextXAlignment.Right
local jumpTrack, jumpFill, jumpKnob = bar(pageMain, 16, 160, 520) jumpFill.BackgroundColor3 = Color3.fromRGB(255,170,90)

local teleportBtn = pill(pageMain, "Teleport (hold keybind)", 16, 206, 166, Color3.fromRGB(90,90,160))
local noclipBtn   = pill(pageMain, "Noclip: OFF",            194, 206, 166, Color3.fromRGB(85,35,35))
local btoolsBtn   = pill(pageMain, "Give BTools",            372, 206, 166, Color3.fromRGB(120,170,60))

local resetSpeed  = pill(pageMain, "Reset Speed",            16, 246, 166, Color3.fromRGB(130,70,70))
local resetJump   = pill(pageMain, "Reset Jump",             194, 246, 166, Color3.fromRGB(130,70,70))
local portalBtn   = pill(pageMain, "Dev Portal",             372, 246, 166, Color3.fromRGB(90,90,160))

-- Keybind mini-row
label(pageMain, "Keybinds", 14, true, nil, 292)
local tpBindBtn = pill(pageMain, "Teleport: "..keybinds.Teleport.Name, 16, 316, 166, Color3.fromRGB(40,40,40))
local ncBindBtn = pill(pageMain, "Noclip: "..keybinds.Noclip.Name,     194, 316, 166, Color3.fromRGB(40,40,40))

-- ========= AIMBOT PAGE (DEV TOOLS) =========
label(pageAimbot, "Aimbot (Dev Tools for your own game)", 18, true, nil, 12)
label(pageAimbot, "Hold the key to aim the CAMERA at the nearest target's head.", 14, false, Color3.fromRGB(200,200,200), 40)

local aimBindBtn = pill(pageAimbot, "Aim Hold: "..keybinds.AimHold.Name, 16, 74, 166, Color3.fromRGB(40,40,40))
local espToggle  = pill(pageAimbot, "ESP: OFF",                             194, 74, 166, Color3.fromRGB(85,85,95))
local linesToggle= pill(pageAimbot, "Lines: OFF",                           372, 74, 166, Color3.fromRGB(85,85,95))

-- ========= CREDITS PAGE =========
label(pageCredits, "Credits", 20, true, nil, 12)
label(pageCredits, "Smoothalicious was here", 16, false, nil, 48)
local discordBtn = pill(pageCredits, "Join Discord", 16, 84, 200, Color3.fromRGB(90,120,200))

-- ========= DRAGGING / WINDOW CONTROL =========
do
    local dragging=false; local dragStart; local startPos
    header.InputBegan:Connect(function(inp)
        if inp.UserInputType==Enum.UserInputType.MouseButton1 then
            dragging=true; dragStart=inp.Position; startPos=panel.Position
            inp.Changed:Connect(function() if inp.UserInputState==Enum.UserInputState.End then dragging=false end end)
        end
    end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement and dragStart and startPos then
            local d=inp.Position-dragStart
            panel.Position=UDim2.fromOffset(startPos.X.Offset+d.X, startPos.Y.Offset+d.Y)
        end
    end)
end

-- ===== UNLOAD CONFIRM =====
local overlay = Instance.new("Frame")
overlay.Visible = false
overlay.BackgroundColor3 = Color3.new(0,0,0)
overlay.BackgroundTransparency = 0.35
overlay.Size = UDim2.fromScale(1,1)
overlay.Parent = panel
local box = Instance.new("Frame"); box.Size=UDim2.fromOffset(360,120); box.Position=UDim2.new(0.5,-180,0.5,-60)
box.BackgroundColor3=Color3.fromRGB(30,30,30); box.BorderSizePixel=0; box.Parent=overlay; Instance.new("UICorner", box).CornerRadius=UDim.new(0,10)
local t = label(box, "Are you sure you want to unload?", 18, true, nil, 14); t.Position = UDim2.fromOffset(12,14)
local yesBtn = pill(box, "Yes, unload", 12, 72, 160, Color3.fromRGB(180,60,60))
local noBtn  = pill(box, "No, keep open", 188, 72, 160, Color3.fromRGB(80,80,90))

local function restoreCollision()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") and origCanCollide[d] ~= nil then d.CanCollide = origCanCollide[d] end
    end
    origCanCollide = {}
end
local function stopNoclip()
    if not noclipEnabled then return end
    noclipEnabled = false
    noclipBtn.Text = "Noclip: OFF"; noclipBtn.BackgroundColor3 = Color3.fromRGB(85,35,35)
    if keepApplyConn then keepApplyConn:Disconnect() keepApplyConn=nil end
    restoreCollision()
end
local function removeBTools()
    local bp = player:FindFirstChildOfClass("Backpack"); if not bp then return end
    for _,tool in ipairs(bp:GetChildren()) do if tool:IsA("Tool") and tool.Name:sub(0,3)=="BT_" then tool:Destroy() end end
end
local function espOff()
    espOn = false
    for inst,h in pairs(highlights) do if h then h:Destroy() end end
    highlights = {}
    for inst,b in pairs(nameTags) do if b then b:Destroy() end end
    nameTags = {}
    if lineGui then lineGui:Destroy(); lineGui=nil end
    espToggle.Text = "ESP: OFF"; espToggle.BackgroundColor3 = Color3.fromRGB(85,85,95)
    linesToggle.Text = "Lines: OFF"; linesToggle.BackgroundColor3 = Color3.fromRGB(85,85,95)
end
local function setDefaults()
    getHumanoid().WalkSpeed = SPEED_DEFAULT
    local hum = getHumanoid(); hum.UseJumpPower = true; hum.JumpPower = JUMP_DEFAULT
    walkVal.Text = tostring(SPEED_DEFAULT); jumpVal.Text = tostring(JUMP_DEFAULT)
end
local function fullUnload()
    if unloaded then return end
    unloaded = true
    aimHolding = false
    stopNoclip()
    espOff()
    removeBTools()
    setDefaults()
    gui:Destroy()
end

closeBtn.MouseButton1Click:Connect(function() overlay.Visible = true end)
noBtn.MouseButton1Click:Connect(function() overlay.Visible = false end)
yesBtn.MouseButton1Click:Connect(function() fullUnload() end)

minBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    pages.Visible = not minimized
    sidebar.Visible = not minimized
    if minimized then panel.Size = UDim2.fromOffset(WINDOW_W, TITLE_H + 10) else panel.Size = UDim2.fromOffset(WINDOW_W, WINDOW_H) end
end)

-- ===== MAIN PAGE WIRING =====
local function applyWalk(v:number) getHumanoid().WalkSpeed = v; walkVal.Text = tostring(v) end
local function applyJump(v:number) local h=getHumanoid(); h.UseJumpPower=true; h.JumpPower=v; jumpVal.Text = tostring(v) end

local setWalk = connectSlider(walkTrack, walkFill, walkKnob, SPEED_MIN, SPEED_MAX, SPEED_DEFAULT, applyWalk)
local setJump = connectSlider(jumpTrack, jumpFill, jumpKnob, JUMP_MIN,  JUMP_MAX,  JUMP_DEFAULT, applyJump)

speedBox.FocusLost:Connect(function()
    if unloaded then return end
    local n = tonumber(speedBox.Text)
    if n then n = clamp(math.floor(n + 0.5), SPEED_MIN, SPEED_MAX); setWalk(n); applyWalk(n) end
    speedBox.Text = ""
end)

teleportBtn.MouseButton1Click:Connect(function()
    -- nothing to do; teleport is via keybind on Main page, this is just a label-style button
end)

-- Noclip
local function applyNoclipOnce()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") then
            if origCanCollide[d] == nil then origCanCollide[d] = d.CanCollide end
            d.CanCollide = false
        end
    end
end
local function toggleNoclip()
    if noclipEnabled then
        stopNoclip()
    else
        noclipEnabled = true
        noclipBtn.Text = "Noclip: ON"; noclipBtn.BackgroundColor3 = Color3.fromRGB(40,110,70)
        applyNoclipOnce()
        keepApplyConn = RunService.Heartbeat:Connect(function() if noclipEnabled then applyNoclipOnce() end end)
    end
end
noclipBtn.MouseButton1Click:Connect(function() if not unloaded then toggleNoclip() end end)

-- BTools
local btoolsGiven=false
local function mkTool(name:string) local t=Instance.new("Tool"); t.RequiresHandle=false; t.Name=name; t.CanBeDropped=false; return t end
btoolsBtn.MouseButton1Click:Connect(function()
    if unloaded or btoolsGiven then return end; btoolsGiven=true
    local bp = player:WaitForChild("Backpack")
    local del = mkTool("BT_Delete")
    del.Activated:Connect(function() local t=mouse.Target if t and not t:IsDescendantOf(player.Character) then t:Destroy() end end)
    del.Parent=bp
    local cln = mkTool("BT_Clone")
    cln.Activated:Connect(function() local t=mouse.Target if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then local c=t:Clone(); c.CFrame=t.CFrame*CFrame.new(0,3,0); c.Parent=t.Parent end end)
    cln.Parent=bp
    local mv = mkTool("BT_Move"); local conn; local picked:BasePart?
    mv.Activated:Connect(function()
        local t=mouse.Target
        if t and t:IsA("BasePart") and not t:IsDescendantOf(player.Character) then
            picked=t; pcall(function() picked:SetNetworkOwner(player) end)
            conn = RunService.RenderStepped:Connect(function() local cf=mouse.Hit if picked and cf then picked.CFrame=CFrame.new(cf.X,cf.Y,cf.Z) end end)
        end
    end)
    mv.Deactivated:Connect(function() if conn then conn:Disconnect() conn=nil end picked=nil end)
    mv.Parent=bp
end)

portalBtn.MouseButton1Click:Connect(function()
    if unloaded then return end
    local ok = pcall(function() GuiService:OpenBrowserWindow(DEV_PORTAL_URL) end)
    if not ok then print("Open in browser:", DEV_PORTAL_URL) end
end)

resetSpeed.MouseButton1Click:Connect(function() if not unloaded then setWalk(SPEED_DEFAULT); applyWalk(SPEED_DEFAULT) end end)
resetJump.MouseButton1Click:Connect(function() if not unloaded then setJump(JUMP_DEFAULT); applyJump(JUMP_DEFAULT) end end)

-- Keybind changing (Main)
local function beginListen(actionName:string, btn:TextButton)
    if listening then return end
    listening = actionName
    btn.Text = actionName..": Press..."
    btn.BackgroundColor3 = Color3.fromRGB(70,70,30)
end
tpBindBtn.MouseButton1Click:Connect(function() beginListen("Teleport", tpBindBtn) end)
ncBindBtn.MouseButton1Click:Connect(function() beginListen("Noclip",   ncBindBtn) end)

-- ===== INPUT / TELEPORT / AIM HOLD =====
local function teleportToMouse()
    local hrp = getHRP()
    local hit = mouse.Hit
    if hit then
        local p3 = Vector3.new(hit.X, hit.Y + 3, hit.Z)
        hrp.CFrame = CFrame.new(p3, p3 + hrp.CFrame.LookVector)
    end
end

UIS.InputBegan:Connect(function(inp, gp)
    if gp or unloaded then return end
    if listening and inp.UserInputType==Enum.UserInputType.Keyboard then
        local kc = inp.KeyCode
        if kc ~= Enum.KeyCode.Unknown and kc ~= Enum.KeyCode.Escape then
            if listening == "Teleport" then keybinds.Teleport = kc; tpBindBtn.Text = "Teleport: "..kc.Name end
            if listening == "Noclip"   then keybinds.Noclip   = kc; ncBindBtn.Text = "Noclip: "..kc.Name end
            if listening == "AimHold"  then keybinds.AimHold  = kc; aimBindBtn.Text = "Aim Hold: "..kc.Name end
            listening = nil
            tpBindBtn.BackgroundColor3 = Color3.fromRGB(40,40,40)
            ncBindBtn.BackgroundColor3 = Color3.fromRGB(40,40,40)
            aimBindBtn.BackgroundColor3= Color3.fromRGB(40,40,40)
        end
    elseif inp.UserInputType==Enum.UserInputType.Keyboard then
        if inp.KeyCode == keybinds.Teleport then teleportToMouse() end
        if inp.KeyCode == keybinds.Noclip   then toggleNoclip()   end
        if inp.KeyCode == keybinds.AimHold  then aimHolding = true end
    end
end)
UIS.InputEnded:Connect(function(inp, gp)
    if gp or unloaded then return end
    if inp.UserInputType==Enum.UserInputType.Keyboard and inp.KeyCode == keybinds.AimHold then
        aimHolding = false
    end
end)

-- Aimbot page bind change
aimBindBtn.MouseButton1Click:Connect(function() beginListen("AimHold", aimBindBtn) end)

-- ===== ESP (names, distance, boxes; optional lines) =====
local function ensureHighlight(model: Model)
    if highlights[model] and highlights[model].Parent then return end
    local h = Instance.new("Highlight")
    h.FillTransparency = 1
    h.OutlineTransparency = 0
    h.OutlineColor = Color3.fromRGB(255,120,120)
    h.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    h.Parent = model
    highlights[model] = h
end
local function ensureNameBillboard(part: BasePart, nameText: string)
    local bb = nameTags[part]
    if not bb then
        bb = Instance.new("BillboardGui")
        bb.Size = UDim2.fromOffset(140, 28)
        bb.StudsOffset = Vector3.new(0, 3, 0)
        bb.AlwaysOnTop = true
        bb.Parent = part
        nameTags[part] = bb
        local t = Instance.new("TextLabel")
        t.Name = "T"
        t.BackgroundTransparency = 0.2
        t.BackgroundColor3 = Color3.fromRGB(30,30,30)
        t.Size = UDim2.fromScale(1,1)
        t.Font = Enum.Font.GothamBold
        t.TextSize = 14
        t.TextColor3 = Color3.new(1,1,1)
        t.Parent = bb
        Instance.new("UICorner", t).CornerRadius = UDim.new(0,8)
    end
    local t = bb:FindFirstChild("T")
    if t and t:IsA("TextLabel") then t.Text = nameText end
end
local function clearESP()
    for _,h in pairs(highlights) do if h then h:Destroy() end end
    highlights = {}
    for _,bb in pairs(nameTags) do if bb then bb:Destroy() end end
    nameTags = {}
    if lineGui then lineGui:Destroy(); lineGui=nil end
end

local function getTargets(): {Model}
    local targets = {}
    -- Tagged targets (recommended)
    for _,i in ipairs(CollectionService:GetTagged(TARGET_TAG)) do
        if i:IsA("Model") then table.insert(targets, i)
        elseif i:IsA("BasePart") and i.Parent and i.Parent:IsA("Model") then table.insert(targets, i.Parent) end
    end
    -- Optional: players (own place only)
    if ALLOW_PLAYER_LOCK then
        for _,plr in ipairs(Players:GetPlayers()) do
            if plr ~= player and plr.Character then table.insert(targets, plr.Character) end
        end
    end
    return targets
end

local function ensureLineGui()
    if lineGui and lineGui.Parent then return end
    lineGui = Instance.new("ScreenGui")
    lineGui.Name = "SmoothiesESP"
    lineGui.IgnoreGuiInset = true
    lineGui.ResetOnSpawn = false
    lineGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    lineGui.Parent = gui
end

local function drawLineTo(point: Vector2)
    ensureLineGui()
    -- Make/Reuse a frame per target call is heavy; here we make a transient line each frame:
    local f = Instance.new("Frame")
    f.AnchorPoint = Vector2.new(0.5,0.5)
    f.BackgroundColor3 = Color3.fromRGB(255,120,120)
    f.BorderSizePixel = 0
    f.Size = UDim2.fromOffset((point - Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)).Magnitude, 2)
    local angle = math.deg(math.atan2(point.Y - camera.ViewportSize.Y/2, point.X - camera.ViewportSize.X/2))
    f.Position = UDim2.fromOffset((point.X + camera.ViewportSize.X/2)/2, (point.Y + camera.ViewportSize.Y/2)/2)
    f.Rotation = angle
    f.Parent = lineGui
    game:GetService("Debris"):AddItem(f, 0.03) -- auto-clean very quickly
end

espToggle.MouseButton1Click:Connect(function()
    espOn = not espOn
    if espOn then
        espToggle.Text = "ESP: ON"; espToggle.BackgroundColor3 = Color3.fromRGB(40,110,70)
    else
        espOff()
    end
end)

local linesOn = false
linesToggle.MouseButton1Click:Connect(function()
    linesOn = not linesOn
    if linesOn then
        linesToggle.Text = "Lines: ON"; linesToggle.BackgroundColor3 = Color3.fromRGB(40,110,70)
    else
        linesToggle.Text = "Lines: OFF"; linesToggle.BackgroundColor3 = Color3.fromRGB(85,85,95)
        if lineGui then lineGui:ClearAllChildren() end
    end
end)

-- ===== AIM LOOP (camera lock & ESP) =====
RunService.RenderStepped:Connect(function()
    if unloaded then return end

    -- ESP
    if espOn then
        local targets = getTargets()
        for _,model in ipairs(targets) do
            local head = headOf(model)
            if head then
                ensureHighlight(model)
                local dist = (head.Position - getHRP().Position).Magnitude
                ensureNameBillboard(head, string.format("%s  —  %d", model.Name, dist))
                if linesOn then
                    local v, onScreen = camera:WorldToViewportPoint(head.Position)
                    if onScreen then drawLineTo(Vector2.new(v.X, v.Y)) end
                end
            end
        end
    end

    -- Aim hold (camera only)
    if aimHolding then
        local best: {model: Model, head: BasePart, d: number}? = nil
        for _,model in ipairs(getTargets()) do
            local head = headOf(model)
            if head then
                local screenPoint, onScreen = camera:WorldToViewportPoint(head.Position)
                if onScreen then
                    local d = (Vector2.new(screenPoint.X, screenPoint.Y) - Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)).Magnitude
                    if not best or d < best.d then best = {model=model, head=head, d=d} end
                end
            end
        end
        if best then
            -- Camera look-at
            local camPos = camera.CFrame.Position
            camera.CFrame = CFrame.new(camPos, best.head.Position)
        end
    end
end)

-- ===== CREDITS DISCORD BUTTON =====
discordBtn.MouseButton1Click:Connect(function()
    local ok = pcall(function() GuiService:OpenBrowserWindow(DISCORD_INVITE) end)
    if not ok then print("Open in browser:", DISCORD_INVITE) end
end)
