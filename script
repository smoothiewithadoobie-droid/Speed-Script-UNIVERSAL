--!strict
-- Utility GUI: Speed(8-500) + Speed Input + Teleport + Noclip + BTools + VC Reconnect + Rebinds + Minimize/Close
-- LocalScript in StarterPlayer > StarterPlayerScripts

local Players = game:GetService("Players")
local UIS = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local VoiceChatService = game:GetService("VoiceChatService")

local player = Players.LocalPlayer
local mouse = player:GetMouse()

-- ========= CONFIG =========
local SPEED_MIN, SPEED_MAX, SPEED_DEFAULT = 8, 500, 16
local keybinds = {
    Teleport = Enum.KeyCode.F,
    Noclip  = Enum.KeyCode.X,
}

-- ========= STATE =========
local listeningFor: string? = nil
local noclipEnabled = false
local keepApplyConn: RBXScriptConnection? = nil
local origCanCollide: {[Instance]: boolean} = {}
local minimized = false

-- ========= HELPERS =========
local function clamp(n:number, a:number, b:number)
    if n < a then return a elseif n > b then return b else return n end
end

local function getCharacter()
    return player.Character or player.CharacterAdded:Wait()
end
local function getHumanoid()
    local c = getCharacter()
    return c:FindFirstChildOfClass("Humanoid") or c:WaitForChild("Humanoid")
end
local function getHRP()
    local c = getCharacter()
    return c:FindFirstChild("HumanoidRootPart") or c:WaitForChild("HumanoidRootPart")
end

-- ========= UI ROOT =========
local gui = Instance.new("ScreenGui")
gui.Name = "UtilityUI"
gui.IgnoreGuiInset = true
gui.ResetOnSpawn = false
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
gui.Parent = player:WaitForChild("PlayerGui")

local panel = Instance.new("Frame")
panel.Name = "Panel"
panel.Size = UDim2.fromOffset(360, 255)
panel.Position = UDim2.fromOffset(40, 120)
panel.BackgroundColor3 = Color3.fromRGB(24,24,24)
panel.BackgroundTransparency = 0.1
panel.BorderSizePixel = 0
panel.Parent = gui
Instance.new("UICorner", panel).CornerRadius = UDim.new(0,12)
local pStroke = Instance.new("UIStroke", panel) pStroke.Thickness = 1.5 pStroke.Transparency = 0.3

local originalSize = panel.Size

-- Drag panel
do
    local dragging=false; local dragStart; local startPos
    panel.InputBegan:Connect(function(inp)
        if inp.UserInputType==Enum.UserInputType.MouseButton1 then
            dragging=true; dragStart=inp.Position; startPos=panel.Position
            inp.Changed:Connect(function() if inp.UserInputState==Enum.UserInputState.End then dragging=false end end)
        end
    end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement and dragStart and startPos then
            local d=inp.Position-dragStart
            panel.Position=UDim2.fromOffset(startPos.X.Offset+d.X, startPos.Y.Offset+d.Y)
        end
    end)
end

-- === Title ===
local title = Instance.new("TextLabel")
title.BackgroundTransparency = 1
title.Text = "Utility"
title.Font = Enum.Font.GothamBold
title.TextSize = 18
title.TextColor3 = Color3.new(1,1,1)
title.TextXAlignment = Enum.TextXAlignment.Left
title.Position = UDim2.fromOffset(14,10)
title.Size = UDim2.fromOffset(160,24)
title.Parent = panel

-- === Close (X) button ===
local closeBtn = Instance.new("TextButton")
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.GothamBold
closeBtn.TextSize = 14
closeBtn.TextColor3 = Color3.fromRGB(255,255,255)
closeBtn.Size = UDim2.fromOffset(28, 24)
closeBtn.Position = UDim2.new(1, -34, 0, 6)
closeBtn.BackgroundColor3 = Color3.fromRGB(180, 50, 50)
closeBtn.BorderSizePixel = 0
closeBtn.Parent = panel
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)

-- === Minimize button ===
local minBtn = Instance.new("TextButton")
minBtn.Text = "-"
minBtn.Font = Enum.Font.GothamBold
minBtn.TextSize = 16
minBtn.TextColor3 = Color3.fromRGB(255,255,255)
minBtn.Size = UDim2.fromOffset(28, 24)
minBtn.Position = UDim2.new(1, -68, 0, 6)
minBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
minBtn.BorderSizePixel = 0
minBtn.Parent = panel
Instance.new("UICorner", minBtn).CornerRadius = UDim.new(0,6)

-- === Close / Minimize logic ===
closeBtn.MouseButton1Click:Connect(function()
    gui:Destroy()
end)
minBtn.MouseButton1Click:Connect(function()
    minimized = not minimized
    if minimized then
        panel.Size = UDim2.fromOffset(originalSize.X.Offset, 40)
        for _, child in ipairs(panel:GetChildren()) do
            if child ~= title and child ~= minBtn and child ~= closeBtn and not child:IsA("UICorner") and not child:IsA("UIStroke") then
                child.Visible = false
            end
        end
    else
        panel.Size = originalSize
        for _, child in ipairs(panel:GetChildren()) do
            if child ~= title and child ~= minBtn and child ~= closeBtn then
                child.Visible = true
            end
        end
    end
end)

-- ========= WALK SPEED (slider + input) =========
local walkLabel = Instance.new("TextLabel")
walkLabel.BackgroundTransparency = 1
walkLabel.Font = Enum.Font.Gotham
walkLabel.TextSize = 14
walkLabel.TextColor3 = Color3.fromRGB(210,210,210)
walkLabel.TextXAlignment = Enum.TextXAlignment.Left
walkLabel.Text = "Walk Speed"
walkLabel.Position = UDim2.fromOffset(14, 42)
walkLabel.Size = UDim2.fromOffset(100, 18)
walkLabel.Parent = panel

local walkNumLabel = Instance.new("TextLabel")
walkNumLabel.BackgroundTransparency = 1
walkNumLabel.Font = Enum.Font.Gotham
walkNumLabel.TextSize = 14
walkNumLabel.TextColor3 = Color3.fromRGB(210,210,210)
walkNumLabel.TextXAlignment = Enum.TextXAlignment.Right
walkNumLabel.Text = tostring(SPEED_DEFAULT)
walkNumLabel.Position = UDim2.new(1, -70, 0, 42)
walkNumLabel.Size = UDim2.fromOffset(56, 18)
walkNumLabel.Parent = panel

local walkBar = Instance.new("Frame")
walkBar.Size = UDim2.fromOffset(300, 10)
walkBar.Position = UDim2.fromOffset(20, 64)
walkBar.BackgroundColor3 = Color3.fromRGB(50,50,50)
walkBar.BorderSizePixel = 0
walkBar.Parent = panel
Instance.new("UICorner", walkBar).CornerRadius = UDim.new(0,5)

local walkFill = Instance.new("Frame")
walkFill.AnchorPoint = Vector2.new(0,0.5)
walkFill.Position = UDim2.fromScale(0,0.5)
walkFill.Size = UDim2.fromScale(0,1)
walkFill.BackgroundColor3 = Color3.fromRGB(50,200,120)
walkFill.BorderSizePixel = 0
walkFill.Parent = walkBar
Instance.new("UICorner", walkFill).CornerRadius = UDim.new(0,5)

local walkKnob = Instance.new("ImageButton")
walkKnob.AnchorPoint = Vector2.new(0.5,0.5)
walkKnob.Size = UDim2.fromOffset(16,16)
walkKnob.Position = UDim2.fromScale(0,0.5)
walkKnob.BackgroundColor3 = Color3.fromRGB(230,230,230)
walkKnob.BorderSizePixel = 0
walkKnob.Parent = walkBar
Instance.new("UICorner", walkKnob).CornerRadius = UDim.new(1,0)
local wKStroke = Instance.new("UIStroke", walkKnob) wKStroke.Thickness = 1 wKStroke.Transparency = 0.2

-- Direct speed input
local speedInput = Instance.new("TextBox")
speedInput.PlaceholderText = "Type speed (8â€“500)"
speedInput.Text = ""
speedInput.ClearTextOnFocus = false
speedInput.Font = Enum.Font.Gotham
speedInput.TextSize = 14
speedInput.TextColor3 = Color3.fromRGB(255,255,255)
speedInput.BackgroundColor3 = Color3.fromRGB(36,36,36)
speedInput.BorderSizePixel = 0
speedInput.Size = UDim2.fromOffset(300, 26)
speedInput.Position = UDim2.fromOffset(20, 84)
speedInput.Parent = panel
Instance.new("UICorner", speedInput).CornerRadius = UDim.new(0,8)

-- ========= NOCLIP TOGGLE + KEYBINDS =========
local noclipBtn = Instance.new("TextButton")
noclipBtn.Font = Enum.Font.GothamBold
noclipBtn.TextSize = 14
noclipBtn.TextColor3 = Color3.new(1,1,1)
noclipBtn.Text = "Noclip: OFF"
noclipBtn.Size = UDim2.fromOffset(100, 28)
noclipBtn.Position = UDim2.fromOffset(240, 10)
noclipBtn.BackgroundColor3 = Color3.fromRGB(80,30,30)
noclipBtn.BorderSizePixel = 0
noclipBtn.Parent = panel
Instance.new("UICorner", noclipBtn).CornerRadius = UDim.new(0,8)

local kbTitle = Instance.new("TextLabel")
kbTitle.BackgroundTransparency = 1
kbTitle.Font = Enum.Font.GothamBold
kbTitle.TextSize = 14
kbTitle.TextColor3 = Color3.fromRGB(255,255,255)
kbTitle.TextXAlignment = Enum.TextXAlignment.Left
kbTitle.Text = "Keybinds"
kbTitle.Position = UDim2.fromOffset(14, 170)
kbTitle.Size = UDim2.fromOffset(100, 18)
kbTitle.Parent = panel

local function newBindRow(labelText:string, x:number, y:number)
    local lbl = Instance.new("TextLabel")
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.Gotham
    lbl.TextSize = 14
    lbl.TextColor3 = Color3.fromRGB(210,210,210)
    lbl.Text = labelText
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.Position = UDim2.fromOffset(x, y)
    lbl.Size = UDim2.fromOffset(80, 24)
    lbl.Parent = panel

    local btn = Instance.new("TextButton")
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.TextColor3 = Color3.new(1,1,1)
    btn.Text = "..."
    btn.Size = UDim2.fromOffset(80, 24)
    btn.Position = UDim2.fromOffset(x+86, y)
    btn.BackgroundColor3 = Color3.fromRGB(36,36,36)
    btn.BorderSizePixel = 0
    btn.Parent = panel
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)
    local stroke = Instance.new("UIStroke", btn) stroke.Thickness = 1 stroke.Transparency = 0.4
    return btn
end

local tpBindBtn = newBindRow("Teleport", 14, 192)
local ncBindBtn = newBindRow("Noclip",   170, 192)

-- ========= VC RECONNECT & BTOOLS =========
local vcButton = Instance.new("TextButton")
vcButton.Font = Enum.Font.GothamBold
vcButton.TextSize = 14
vcButton.TextColor3 = Color3.new(1,1,1)
vcButton.Text = "VC Reconnect"
vcButton.Size = UDim2.fromOffset(140, 28)
vcButton.Position = UDim2.fromOffset(20, 132)
vcButton.BackgroundColor3 = Color3.fromRGB(35,125,255)
vcButton.BorderSizePixel = 0
vcButton.Parent = panel
Instance.new("UICorner", vcButton).CornerRadius = UDim.new(0,8)

local btoolsButton = Instance.new("TextButton")
btoolsButton.Font = Enum.Font.GothamBold
btoolsButton.TextSize = 14
btoolsButton.TextColor3 = Color3.new(1,1,1)
btoolsButton.Text = "Give BTools"
btoolsButton.Size = UDim2.fromOffset(140, 28)
btoolsButton.Position = UDim2.fromOffset(180, 132)
btoolsButton.BackgroundColor3 = Color3.fromRGB(120, 170, 60)
btoolsButton.BorderSizePixel = 0
btoolsButton.Parent = panel
Instance.new("UICorner", btoolsButton).CornerRadius = UDim.new(0,8)

-- ========= SLIDER WIRING (Walk Speed) =========
local function alphaFromClick(frame:Frame, xPixel:number)
    return clamp((xPixel - frame.AbsolutePosition.X) / frame.AbsoluteSize.X, 0, 1)
end
local function connectSlider(bar:Frame, fill:Frame, knob:ImageButton, minV:number, maxV:number, defaultV:number, onSet:(number)->())
    local function toAlpha(v:number) return (v - minV) / (maxV - minV) end
    local function fromAlpha(a:number) return math.floor(minV + a*(maxV-minV) + 0.5) end
    local function setAlpha(a:number)
        a = clamp(a, 0, 1)
        fill.Size = UDim2.fromScale(a, 1)
        knob.Position = UDim2.fromScale(a, 0.5)
        onSet(fromAlpha(a))
    end
    setAlpha(toAlpha(defaultV))
    bar.InputBegan:Connect(function(inp)
        if inp.UserInputType == Enum.UserInputType.MouseButton1 then
            setAlpha(alphaFromClick(bar, inp.Position.X))
        end
    end)
    local dragging=false
    knob.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=true end end)
    knob.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 then dragging=false end end)
    UIS.InputChanged:Connect(function(inp)
        if dragging and inp.UserInputType==Enum.UserInputType.MouseMovement then
            setAlpha(alphaFromClick(bar, inp.Position.X))
        end
    end)
    return function(v:number) -- external setter to sync UI
        local a = toAlpha(v)
        setAlpha(a)
    end
end

local syncWalkUI = connectSlider(walkBar, walkFill, walkKnob, SPEED_MIN, SPEED_MAX, SPEED_DEFAULT, function(val)
    walkNumLabel.Text = tostring(val)
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = val end
end)

-- Apply typed speed
speedInput.FocusLost:Connect(function()
    local n = tonumber(speedInput.Text)
    if n then
        n = clamp(math.floor(n + 0.5), SPEED_MIN, SPEED_MAX)
        syncWalkUI(n)
        local hum = getHumanoid()
        if hum then hum.WalkSpeed = n end
    end
    speedInput.Text = ""
end)

-- ========= TELEPORT =========
local function teleportToMouse()
    local hrp = getHRP()
    local hit = mouse.Hit
    if hit then
        local targetPos = Vector3.new(hit.X, hit.Y + 3, hit.Z)
        hrp.CFrame = CFrame.new(targetPos, targetPos + hrp.CFrame.LookVector)
    end
end

-- ========= NOCLIP =========
local function applyNoclipOnce()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") then
            if origCanCollide[d] == nil then
                origCanCollide[d] = d.CanCollide
            end
            d.CanCollide = false
        end
    end
end

local function restoreCollision()
    local char = getCharacter()
    for _, d in ipairs(char:GetDescendants()) do
        if d:IsA("BasePart") and origCanCollide[d] ~= nil then
            d.CanCollide = origCanCollide[d]
        end
    end
    origCanCollide = {}
end

local function startNoclip()
    if noclipEnabled then return end
    noclipEnabled = true
    noclipBtn.Text = "Noclip: ON"
    noclipBtn.BackgroundColor3 = Color3.fromRGB(30,90,50)
    applyNoclipOnce()
    keepApplyConn = RunService.Heartbeat:Connect(function()
        if noclipEnabled then applyNoclipOnce() end
    end)
end

local function stopNoclip()
    if not noclipEnabled then return end
    noclipEnabled = false
    noclipBtn.Text = "Noclip: OFF"
    noclipBtn.BackgroundColor3 = Color3.fromRGB(80,30,30)
    if keepApplyConn then keepApplyConn:Disconnect() keepApplyConn=nil end
    restoreCollision()
end

local function toggleNoclip()
    if noclipEnabled then stopNoclip() else startNoclip() end
end

noclipBtn.MouseButton1Click:Connect(toggleNoclip)

-- ========= KEYBINDS =========
local function keycodeToText(kc: Enum.KeyCode): string
    return kc.Name
end
local function refreshBindButtons()
    tpBindBtn.Text = keycodeToText(keybinds.Teleport)
    ncBindBtn.Text = keycodeToText(keybinds.Noclip)
end
refreshBindButtons()

local function startListen(actionName:string, btn: TextButton)
    if listeningFor then return end
    listeningFor = actionName
    btn.Text = "Press key..."
    btn.BackgroundColor3 = Color3.fromRGB(70,70,30)
end

tpBindBtn.MouseButton1Click:Connect(function() startListen("Teleport", tpBindBtn) end)
ncBindBtn.MouseButton1Click:Connect(function() startListen("Noclip",   ncBindBtn) end)

UIS.InputBegan:Connect(function(inp, gp)
    if gp then return end
    if listeningFor and inp.UserInputType == Enum.UserInputType.Keyboard then
        local picked = inp.KeyCode
        if picked == Enum.KeyCode.Unknown or picked == Enum.KeyCode.Escape then return end
        for action, kc in pairs(keybinds) do
            if action ~= listeningFor and kc == picked then
                keybinds[action] = Enum.KeyCode.Unknown
            end
        end
        keybinds[listeningFor] = picked
        listeningFor = nil
        refreshBindButtons()
        tpBindBtn.BackgroundColor3 = Color3.fromRGB(36,36,36)
        ncBindBtn.BackgroundColor3 = Color3.fromRGB(36,36,36)
    end
end)

UIS.InputBegan:Connect(function(inp, gp)
    if gp or listeningFor then return end
    if inp.UserInputType == Enum.UserInputType.Keyboard then
        if keybinds.Teleport ~= Enum.KeyCode.Unknown and inp.KeyCode == keybinds.Teleport then
            teleportToMouse()
        elseif keybinds.Noclip ~= Enum.KeyCode.Unknown and inp.KeyCode == keybinds.Noclip then
            toggleNoclip()
        end
    end
end)

-- ========= VC RECONNECT (cannot bypass bans) =========
local function vcReconnect()
    vcButton.Text = "VC: Checking..."
    task.spawn(function()
        local ok1, enabled = pcall(function()
            return VoiceChatService:IsVoiceChatEnabledForUserAsync(player.UserId)
        end)
        if not ok1 or not enabled then
            vcButton.Text = "VC disabled/banned"
            vcButton.BackgroundColor3 = Color3.fromRGB(100,60,60)
            return
        end
        local ok2, perm = pcall(function()
            return VoiceChatService:RequestMicrophonePermissionAsync()
        end)
        if not ok2 or not perm then
            vcButton.Text = "Mic permission denied"
            vcButton.BackgroundColor3 = Color3.fromRGB(100,60,60)
            return
        end
        vcButton.Text = "VC reconnected"
        vcButton.BackgroundColor3 = Color3.fromRGB(35,125,255)
    end)
end
vcButton.MouseButton1Click:Connect(vcReconnect)

-- ========= BTOOLS (Delete / Clone / Move) =========
local btoolsGiven = false
local function mkTool(name:string)
    local t = Instance.new("Tool")
    t.RequiresHandle = false
    t.Name = name
    t.CanBeDropped = false
    return t
end

local function giveBTools()
    if btoolsGiven then return end
    btoolsGiven = true

    local backpack = player:WaitForChild("Backpack")

    -- DELETE tool
    local delTool = mkTool("BT_Delete")
    delTool.Activated:Connect(function()
        local target = mouse.Target
        if target and target:IsDescendantOf(workspace) and not target:IsDescendantOf(player.Character) then
            target:Destroy()
        end
    end)
    delTool.Parent = backpack

    -- CLONE tool
    local cloneTool = mkTool("BT_Clone")
    cloneTool.Activated:Connect(function()
        local target = mouse.Target
        if target and target:IsA("BasePart") and not target:IsDescendantOf(player.Character) then
            local c = target:Clone()
            c.CFrame = target.CFrame * CFrame.new(0, 3, 0)
            c.Parent = target.Parent
        end
    end)
    cloneTool.Parent = backpack

    -- MOVE tool (drag toward mouse)
    local moveTool = mkTool("BT_Move")
    local movingConn: RBXScriptConnection? = nil
    local picked: BasePart? = nil

    moveTool.Activated:Connect(function()
        picked = mouse.Target
        if picked and picked:IsA("BasePart") and not picked:IsDescendantOf(player.Character) then
            picked.Anchored = false
            local hrp = getHRP()
            if picked.SetNetworkOwner and hrp then pcall(function() picked:SetNetworkOwner(player) end) end
            movingConn = RunService.RenderStepped:Connect(function()
                if not picked then return end
                local cf = mouse.Hit
                if cf then picked.CFrame = CFrame.new(cf.X, cf.Y, cf.Z) end
            end)
        end
    end)
    moveTool.Deactivated:Connect(function()
        if movingConn then movingConn:Disconnect() movingConn=nil end
        picked = nil
    end)
    moveTool.Parent = backpack
end
btoolsButton.MouseButton1Click:Connect(giveBTools)

-- ========= INIT / RESPAWN =========
task.defer(function()
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = SPEED_DEFAULT end
end)

player.CharacterAdded:Connect(function()
    task.defer(function()
        local hum = getHumanoid()
        if hum then
            hum.WalkSpeed = tonumber(walkNumLabel.Text) or SPEED_DEFAULT
        end
        if noclipEnabled then applyNoclipOnce() end
    end)
end)
